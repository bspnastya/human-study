
from __future__ import annotations
from streamlit_autorefresh import st_autorefresh
import random, time, base64, datetime, secrets, math, os, threading, queue
from typing import List, Dict
import json
import streamlit as st, streamlit.components.v1 as components
import gspread
from oauth2client.service_account import ServiceAccountCredentials

st.set_page_config(
    page_title="–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
    page_icon="üéØ",
    layout="centered",
    initial_sidebar_state="collapsed",
)


st.markdown("""
<style>
html,body,.stApp,[data-testid="stAppViewContainer"],.main,.block-container{
  background:#808080!important;color:#111!important;}
h1,h2,h3,h4,h5,h6{color:#111!important;}
.question-card,* .question-card{color:#fff!important;}
.stButton>button{color:#fff!important;}
header[data-testid="stHeader"],div[data-testid="stHeader"]{display:none;}
.question-card{background:transparent!important;border:none!important;}
input[data-testid="stTextInput"]{height:52px!important;padding:0 16px!important;
                                 font-size:1.05rem;}
.stButton>button{min-height:52px!important;padding:0 20px!important;
                 border:1px solid #555!important;background:#222!important;
                 color:#ddd!important;border-radius:8px;}
#mobile-overlay{position:fixed;inset:0;z-index:9999;background:#808080;display:none;
  align-items:center;justify-content:center;color:#fff;font:500 1.2rem/1.5 sans-serif;
  text-align:center;padding:0 20px;}
@media (max-width:1023px){#mobile-overlay{display:flex;}}
</style>
<div id="mobile-overlay">
  –£–≤–∞–∂–∞–µ–º—ã–π&nbsp;—É—á–∞—Å—Ç–Ω–∏–∫,<br>
  –¥–∞–Ω–Ω–æ–µ&nbsp;–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å&nbsp;–ü–ö –∏–ª–∏&nbsp;–Ω–æ—É—Ç–±—É–∫–∞.
</div>
""", unsafe_allow_html=True)


@st.cache_resource(show_spinner="‚Ä¶")
def get_sheet() -> gspread.Worksheet:
    scopes = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/drive",
    ]

    creds_dict = dict(st.secrets["gsp"])

    gc = gspread.authorize(
        ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scopes)
    )

    return gc.open("human_study_results").sheet1


SHEET = get_sheet()


log_q: queue.Queue[List] = queue.Queue()
def _writer():
    while True:
        row=log_q.get()
        try:SHEET.append_row(row)
        except Exception as e:print("Sheets error:",e)
        log_q.task_done()
threading.Thread(target=_writer,daemon=True).start()


TIME_LIMIT = 30
CARDS = [
    ("A","PCA" ,"https://storage.yandexcloud.net/test3123234442/pca_rgb_result_1.png","contrast","–°–∫–æ–ª—å–∫–æ –º–∞–ª–µ–Ω—å–∫–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–æ–≤ –≤—ã –≤–∏–¥–∏—Ç–µ?","37"),
    ("A","PCA" ,"https://storage.yandexcloud.net/test3123234442/pca_rgb_result_1.png","consistency","–ö—Ä—É–≥ –∏ —Ä–æ–º–± –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞?","–¥–∞"),
    ("A","UMAP","https://storage.yandexcloud.net/test3123234442/umap_rgb_result_1.png","contrast","–°–∫–æ–ª—å–∫–æ –º–∞–ª–µ–Ω—å–∫–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–æ–≤ –≤—ã –≤–∏–¥–∏—Ç–µ?","42"),
    ("A","UMAP","https://storage.yandexcloud.net/test3123234442/umap_rgb_result_1.png","consistency","–í—Å–µ –∫–≤–∞–¥—Ä–∞—Ç—ã –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞?","–Ω–µ—Ç"),
    ("B","PCA" ,"https://storage.yandexcloud.net/test3123234442/pca_rgb_result_2.png","contrast","–°–∫–æ–ª—å–∫–æ –º–∞–ª–µ–Ω—å–∫–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–æ–≤ –≤—ã –≤–∏–¥–∏—Ç–µ?","35"),
    ("B","PCA" ,"https://storage.yandexcloud.net/test3123234442/pca_rgb_result_2.png","consistency","–ö—Ä—É–≥ –∏ —Ä–æ–º–± –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞?","–Ω–µ—Ç"),
    ("B","UMAP","https://storage.yandexcloud.net/test3123234442/umap_rgb_result_2.png","contrast","–°–∫–æ–ª—å–∫–æ –º–∞–ª–µ–Ω—å–∫–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–æ–≤ –≤—ã –≤–∏–¥–∏—Ç–µ?","40"),
    ("B","UMAP","https://storage.yandexcloud.net/test3123234442/umap_rgb_result_2.png","consistency","–í—Å–µ –∫–≤–∞–¥—Ä–∞—Ç—ã –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞?","–¥–∞"),
]

def make_questions() -> List[Dict]:
    qs = [{"image_id":i, "method":m, "qtype":t, "prompt":p, "correct":c, "img":url}
          for i,m,url,t,p,c in CARDS]
    random.shuffle(qs)
    for n,q in enumerate(qs, 1):
        q["‚Ññ"] = n
    return qs

if "questions" not in st.session_state:
    st.session_state.update(questions=make_questions(),
                            idx=0, name="", q_start=None)

qs = st.session_state.questions
total_q = len(qs)


if st.session_state.get("blank_until", 0) > time.time():
    st_autorefresh(interval=250, key="blank")
    
    st.markdown("")
    st.stop()
elif "blank_until" in st.session_state:
    del st.session_state["blank_until"]


if not st.session_state.name:
    st.markdown("""
<div style="color:#111;">
  <h2>–£–≤–∞–∂–∞–µ–º—ã–π —É—á–∞—Å—Ç–Ω–∏–∫,<br>–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ –∏–∑—É—á–µ–Ω–∏—é –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.</h2>
  <p><b>–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç</b><br>
     –í —Ö–æ–¥–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö, 
     –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ. –£ –≤–∞—Å –±—É–¥–µ—Ç 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å. 
     –í—Å–µ–≥–æ –≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ <b>N</b> –≤–æ–ø—Ä–æ—Å–æ–≤. 
     –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 10-15 –º–∏–Ω—É—Ç.</p>
  <p><b>–ß—Ç–æ —ç—Ç–æ –∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è?</b><br>
     –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤. 
     –ù–∏ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ¬´—ç—Ç–∞–ª–æ–Ω–æ–º¬ª. 
     –¶–µ–ª—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ ‚Äî –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª—É—á—à–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.</p>
  <p><b>–í–∞–∂–Ω–æ</b><br>
     –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–µ–Ω.  
     –ü—Ä–æ—Ö–æ–¥–∏—Ç—å –µ–≥–æ —Å–ª–µ–¥—É–µ—Ç <b>—Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –∏–ª–∏ –Ω–æ—É—Ç–±—É–∫–µ</b>:  
     –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏–ª–∏ –ø–ª–∞–Ω—à–µ—Ç–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.</p>
  <p>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º –∏ –Ω–∞–∂–º–∏—Ç–µ Enter  
     –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º¬ª.</p>
</div>
""", unsafe_allow_html=True)

    uname = st.text_input("", placeholder="–§–∞–º–∏–ª–∏—è / –ø—Å–µ–≤–¥–æ–Ω–∏–º",
                          key="username", label_visibility="collapsed")
    if st.button("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º"):
        st.session_state.name = f"–£—á–∞—Å—Ç–Ω–∏–∫_{secrets.randbelow(900_000)+100_000}"
        st.rerun()
    if uname:
        st.session_state.name = uname.strip()
        st.rerun()
    st.stop()


i = st.session_state.idx
if i < total_q:
    
    st_autorefresh(interval=1000, limit=TIME_LIMIT+2, key=f"t_{i}")

    q = qs[i]
    if st.session_state.q_start is None:
        st.session_state.q_start = time.time()

    elapsed = time.time() - st.session_state.q_start
    left = max(math.ceil(TIME_LIMIT - elapsed), 0)

    
    if elapsed >= TIME_LIMIT:
        ans = st.session_state.get(f"ans{i}", "")
        ok = str(ans).strip().lower() == str(q["correct"]).lower()
        ms = TIME_LIMIT * 1000
        log_q.put([datetime.datetime.utcnow().isoformat(), st.session_state.name,
                   q["‚Ññ"], q["image_id"], q["method"], q["qtype"],
                   q["prompt"], ans, q["correct"], ms, ok])
        q.update({"–æ—Ç–≤–µ—Ç": ans if ans else "‚Äî", "–≤—Ä–µ–º—è, –º—Å": f"{ms:,}",
                  "‚úì": "‚úÖ" if ok else "‚ùå"})
        st.session_state.idx += 1
        st.session_state.q_start = None
        
        st.session_state.blank_until = time.time() + 1.5
        st.experimental_rerun()

   
    components.html(f"""
    <div style="display:flex;gap:16px;height:70px">
      <div style="position:relative;width:70px;height:70px">
        <svg width="70" height="70">
          <circle cx="35" cy="35" r="26" stroke="#444" stroke-width="6" fill="none"/>
          <circle cx="35" cy="35" r="26" stroke="#52b788" stroke-width="6"
                  fill="none" stroke-dasharray="163.3628"
                  stroke-dashoffset="{163.3628*(left/TIME_LIMIT)}"
                  transform="rotate(-90 35 35)"/>
        </svg>
        <span style="position:absolute;top:50%;left:50%;
              transform:translate(-50%,-50%);font:700 1.2rem sans-serif;color:#52b788">
          {left}
        </span>
      </div>
    </div>
    """, height=80)

    st.markdown(f"### –í–æ–ø—Ä–æ—Å ‚Ññ{q['‚Ññ']} –∏–∑ {total_q}")
    st.image(q["img"], clamp=True)

    if q["qtype"] == "contrast":
        _ = st.number_input(q["prompt"], key=f"ans{i}",
                            min_value=0, step=1, format="%d")
    else:
        _ = st.radio(q["prompt"], ["–¥–∞", "–Ω–µ—Ç"],
                     key=f"ans{i}", horizontal=True, index=None)

    if st.button("–î–∞–ª–µ–µ"):
        ans = st.session_state.get(f"ans{i}", "")
        ms = int((time.time() - st.session_state.q_start) * 1000)
        ok = str(ans).strip().lower() == str(q["correct"]).lower()
        log_q.put([datetime.datetime.utcnow().isoformat(), st.session_state.name,
                   q["‚Ññ"], q["image_id"], q["method"], q["qtype"],
                   q["prompt"], ans, q["correct"], ms, ok])
        q.update({"–æ—Ç–≤–µ—Ç": ans if ans else "‚Äî", "–≤—Ä–µ–º—è, –º—Å": f"{ms:,}",
                  "‚úì": "‚úÖ" if ok else "‚ùå"})
        st.session_state.idx += 1
        st.session_state.q_start = None
        
        st.session_state.blank_until = time.time() + 1.5
        st.experimental_rerun()


else:
    correct = sum(1 for q in qs if q.get("‚úì") == "‚úÖ")
    st.success(f"–ì–æ—Ç–æ–≤–æ, {st.session_state.name}!")
    st.markdown(f"""
    <div style="margin-top:30px;padding:30px;text-align:center;font-size:2rem;
                color:#fff;background:#262626;border-radius:12px;">
        –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:<br><b>{correct} / {total_q}</b> –≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    </div>
    """, unsafe_allow_html=True)
    st.balloons()
