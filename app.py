from __future__ import annotations
from streamlit_autorefresh import st_autorefresh
import random, time, datetime, secrets, threading, queue, re, itertools, math
from typing import List, Dict
import streamlit as st
import streamlit.components.v1 as components
import gspread
from oauth2client.service_account import ServiceAccountCredentials

MOBILE_QS_FLAG = "mobile"
st.set_page_config(page_title="–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
                   page_icon="üéØ", layout="centered",
                   initial_sidebar_state="collapsed")

components.html("""
<style>
    .stApp { background-color: #FFFFFF; }
    div[data-testid="stSidebar"] { display: none; }
</style>
""", height=0)

q = st.query_params if hasattr(st, "query_params") else st.experimental_get_query_params()
if q.get(MOBILE_QS_FLAG) == ["1"]:
    st.markdown("""
    <style>
        .mobile-warning {
            text-align: center;
            padding: 50px 20px;
            background: #f8f9fa;
            border-radius: 10px;
            margin: 20px;
        }
    </style>
    <div class="mobile-warning">
        <h2>–£–≤–∞–∂–∞–µ–º—ã–π —É—á–∞—Å—Ç–Ω–∏–∫</h2>
        <p>–î–∞–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å <strong>–ü–ö –∏–ª–∏ –Ω–æ—É—Ç–±—É–∫–∞</strong>.</p>
    </div>
    """, unsafe_allow_html=True)
    st.stop()

BASE_URL = "https://storage.yandexcloud.net/test3123234442"
TIME_LIMIT = 15
INTRO_TIME_REST = 3
REFRESH_INTERVAL = 500

def render_timer(sec: int, tid: str):
    components.html(f"""
    <style>
        .timer-container {{
            background: #f0f2f6;
            padding: 10px;
            border-radius: 8px;
            text-align: center;
            font-weight: bold;
            font-size: 16px;
        }}
    </style>
    <div class="timer-container">
        –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {sec} —Å–µ–∫
    </div>
    """, height=50)

@st.cache_resource(show_spinner="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ‚Ä¶")
def get_sheet():
    try:
        scopes = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        gc = gspread.authorize(ServiceAccountCredentials.from_json_keyfile_dict(dict(st.secrets["gsp"]), scopes))
        return gc.open("human_study_results").sheet1
    except:
        return None

SHEET = get_sheet()
log_q = queue.Queue()

def writer():
    while True:
        try:
            r = log_q.get()
            if SHEET:
                SHEET.append_row(r)
            log_q.task_done()
        except:
            pass

threading.Thread(target=writer, daemon=True).start()

GROUPS = ["img1_dif_corners", "img2_dif_corners", "img3_same_corners_no_symb", "img4_same_corners", "img5_same_corners"]
ALGS = ["pca_rgb_result", "socolov_lab_result", "socolov_rgb_result", "umap_rgb_result"]
CORNER = {"img1_dif_corners": "–Ω–µ—Ç", "img2_dif_corners": "–Ω–µ—Ç", "img3_same_corners_no_symb": "–¥–∞", "img4_same_corners": "–¥–∞", "img5_same_corners": "–¥–∞"}
LETTER = {"img1_dif_corners": "–∂", "img2_dif_corners": "—Ñ—è", "img3_same_corners_no_symb": "–ù–µ –≤–∏–∂—É", "img4_same_corners": "–∞–±", "img5_same_corners": "—é—ç—ã"}

def url(g: str, a: str) -> str:
    return f"{BASE_URL}/{g}_{a}.png"

def clean(s: str) -> set[str]:
    return set(re.sub(r"[ ,.;:-]+", "", s.lower()))

def make_qs() -> List[Dict]:
    pg = {g: [] for g in GROUPS}
    for g, a in itertools.product(GROUPS, ALGS):
        pg[g] += [
            {"group": g, "alg": a, "img": url(g, a), "qtype": "corners", "prompt": "–ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π –∏ –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª ‚Äî –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞?", "correct": CORNER[g]},
            {"group": g, "alg": a, "img": url(g, a), "qtype": "letters", "prompt": "–ï—Å–ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤—ã –≤–∏–¥–∏—Ç–µ –±—É–∫–≤—ã, —Ç–æ —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ.", "correct": LETTER[g]}
        ]
    for v in pg.values():
        random.shuffle(v)
    seq, prev = [], None
    while any(pg.values()):
        choices = [g for g in GROUPS if pg[g] and g != prev] or [g for g in GROUPS if pg[g]]
        prev = random.choice(choices)
        seq.append(pg[prev].pop())
    for n, q in enumerate(seq, 1):
        q["‚Ññ"] = n
    return seq

if "initialized" not in st.session_state:
    st.session_state.update(
        initialized=True, questions=make_qs(), idx=0, name="",
        phase="intro", phase_start_time=None, pause_until=0)

if (st.session_state.pause_until > time.time() and st.session_state.idx < len(st.session_state.questions)):
    st.markdown('<div style="text-align: center; padding: 20px;">–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É...</div>', unsafe_allow_html=True)
    stamp = int(st.session_state.pause_until)
    st_autorefresh(interval=500, key=f"pause_{stamp}")
    st.stop()

if not st.session_state.name:
    st.markdown("""
    <style>
        .intro-container {
            background: #f8f9fa;
            padding: 30px;
            border-radius: 10px;
            margin: 20px 0;
        }
        .intro-container h2 {
            text-align: center;
            color: #333;
            margin-bottom: 30px;
        }
        .intro-container h3 {
            color: #555;
            margin-top: 25px;
            margin-bottom: 15px;
        }
        .intro-container p {
            color: #666;
            line-height: 1.6;
            margin-bottom: 15px;
        }
    </style>
    <div class="intro-container">
        <h2>–£–≤–∞–∂–∞–µ–º—ã–π —É—á–∞—Å—Ç–Ω–∏–∫,<br>–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ –∏–∑—É—á–µ–Ω–∏—é –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.</h2>
        
        <h3>–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç</h3>
        <p>–í —Ö–æ–¥–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ. –í—Å–µ–≥–æ –≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ <strong>40</strong> –≤–æ–ø—Ä–æ—Å–æ–≤. –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 10-15 –º–∏–Ω—É—Ç.</p>
        
        <p><strong>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç —Å–ø–æ–∫–æ–π–Ω–æ: –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ—Ü–µ–Ω–∫—É –∏—Å–ø—ã—Ç—É–µ–º—ã—Ö. –û—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–¥–∞—é—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ä–∞–∑–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.</strong></p>
        
        <h3>–ß—Ç–æ —ç—Ç–æ –∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è?</h3>
        <p>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤. –ù–∏ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ¬´—ç—Ç–∞–ª–æ–Ω–æ–º¬ª. –¶–µ–ª—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ ‚Äî –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª—É—á—à–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.</p>
        
        <h3>–í–∞–∂–Ω–æ</h3>
        <p>–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–µ–Ω. –ü—Ä–æ—Ö–æ–¥–∏—Ç—å –µ–≥–æ —Å–ª–µ–¥—É–µ—Ç <strong>—Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –∏–ª–∏ –Ω–æ—É—Ç–±—É–∫–µ</strong>.</p>
        
        <p style="text-align: center; margin-top: 20px;">–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º¬ª.</p>
    </div>
    """, unsafe_allow_html=True)
    
    u = st.text_input("", placeholder="–í–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º", key="username", label_visibility="collapsed")
    
    if st.button("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º"):
        st.session_state.name = f"–£—á–∞—Å—Ç–Ω–∏–∫_{secrets.randbelow(900000) + 100000}"
        st.rerun()
    
    if u:
        st.session_state.name = u.strip()
        st.rerun()
    
    st.stop()

def finish(a: str):
    q = st.session_state.questions[st.session_state.idx]
    t_ms = int((time.time() - st.session_state.phase_start_time) * 1000) if st.session_state.phase_start_time else 0
    ok = (clean(a) == clean(q["correct"]) if q["qtype"] == "letters" else a.lower() == q["correct"].lower())
    log_q.put([datetime.datetime.utcnow().isoformat(), st.session_state.name, q["‚Ññ"], q["group"], q["alg"], q["qtype"], q["prompt"], a, q["correct"], t_ms, ok])
    st.session_state.update(idx=st.session_state.idx + 1, phase="intro", phase_start_time=None, pause_until=time.time() + 0.5)
    st.rerun()

qs, total = st.session_state.questions, len(st.session_state.questions)
idx = st.session_state.idx

if idx >= total:
    st.markdown("""
    <style>
        .completion-container {
            text-align: center;
            padding: 50px;
            background: #f8f9fa;
            border-radius: 10px;
            margin: 20px;
        }
        .completion-container h2 {
            color: #333;
            margin-bottom: 20px;
        }
        .completion-container h3 {
            color: #666;
        }
    </style>
    <div class="completion-container">
        <h2>–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ.</h2>
        <h3>–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!</h3>
    </div>
    """, unsafe_allow_html=True)
    st.balloons()
    st.stop()

cur = qs[idx]

if st.session_state.phase == "intro":
    if idx < 5:
        txt_c = """–°–µ–π—á–∞—Å –≤—ã —É–≤–∏–¥–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –¶–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –¥–∏–∞–º–µ—Ç—Ä–∞–ª—å–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —É–≥–ª—ã, <strong>–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π –∏ –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π</strong>, –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –æ–∫—Ä–∞—à–µ–Ω—ã –ª–∏ –æ–Ω–∏ –≤ –æ–¥–∏–Ω —Ü–≤–µ—Ç.<br><br>–ö–∞—Ä—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ <strong>15 —Å–µ–∫—É–Ω–¥</strong>. –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ."""
        txt_l = """–°–µ–π—á–∞—Å –≤—ã —É–≤–∏–¥–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –¶–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ <strong>–±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞</strong>.<br><br>–ù–∞–π–¥–µ–Ω–Ω—ã–µ –±—É–∫–≤—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ: –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–∞–º–∏, –∑–∞–ø—è—Ç—ã–º–∏ –∏ —Ç. –¥., –∞ —Ç–∞–∫–∂–µ —Å–ª–∏—Ç–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.<br><br>–ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–∞—Ä—Ç–∏–Ω–∫–∞—Ö –±—É–∫–≤ –Ω–µ—Ç ‚Äî —Ç–æ–≥–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <strong>¬´–ù–µ –≤–∏–∂—É –±—É–∫–≤¬ª</strong>."""
        
        st.markdown(f"""
        <style>
            .instruction-box {{
                background: #e8f4f8;
                padding: 20px;
                border-radius: 10px;
                margin: 20px 0;
            }}
        </style>
        <div class="instruction-box">
            {txt_c if cur['qtype'] == 'corners' else txt_l}
        </div>
        """, unsafe_allow_html=True)
        
        if st.button("–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É", key=f"go_{idx}"):
            st.session_state.update(phase="question", phase_start_time=None)
            st.rerun()
        st.stop()
    
    if st.session_state.phase_start_time is None:
        st.session_state.phase_start_time = time.time()
    
    remaining = INTRO_TIME_REST - (time.time() - st.session_state.phase_start_time)
    if remaining <= 0:
        st.session_state.update(phase="question", phase_start_time=None)
        st.rerun()
    
    render_timer(math.ceil(remaining), f"intro_{idx}")
    
    if cur["qtype"] == "corners":
        st.markdown("""
        <style>
            .preview-container {
                background: #f8f9fa;
                padding: 20px;
                border-radius: 10px;
                margin: 20px 0;
                text-align: center;
            }
            .preview-container h3 {
                color: #333;
                margin-bottom: 15px;
            }
            .preview-container p {
                color: #666;
                line-height: 1.5;
            }
        </style>
        <div class="preview-container">
            <h3>–ù–∞—á–∞–ª–æ –ø–æ–∫–∞–∑–∞ ‚Äî —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è</h3>
            <p>–°–µ–π—á–∞—Å –≤—ã —É–≤–∏–¥–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –¶–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –¥–∏–∞–º–µ—Ç—Ä–∞–ª—å–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —É–≥–ª—ã, <strong>–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π –∏ –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π</strong>, –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –æ–∫—Ä–∞—à–µ–Ω—ã –ª–∏ –æ–Ω–∏ –≤ –æ–¥–∏–Ω —Ü–≤–µ—Ç.</p>
            <p>–ö–∞—Ä—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ <strong>15 —Å–µ–∫—É–Ω–¥</strong>. –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.</p>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown("""
        <style>
            .preview-container {
                background: #f8f9fa;
                padding: 20px;
                border-radius: 10px;
                margin: 20px 0;
                text-align: center;
            }
            .preview-container h3 {
                color: #333;
                margin-bottom: 15px;
            }
            .preview-container p {
                color: #666;
                line-height: 1.5;
            }
        </style>
        <div class="preview-container">
            <h3>–ù–∞—á–∞–ª–æ –ø–æ–∫–∞–∑–∞ ‚Äî —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è</h3>
            <p>–°–µ–π—á–∞—Å –≤—ã —É–≤–∏–¥–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –¶–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ <strong>–±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞</strong>.</p>
            <p>–ù–∞–π–¥–µ–Ω–Ω—ã–µ –±—É–∫–≤—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ: –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–∞–º–∏, –∑–∞–ø—è—Ç—ã–º–∏ –∏ —Ç. –¥., –∞ —Ç–∞–∫–∂–µ —Å–ª–∏—Ç–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.</p>
            <p>–ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–∞—Ä—Ç–∏–Ω–∫–∞—Ö –±—É–∫–≤ –Ω–µ—Ç ‚Äî —Ç–æ–≥–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <strong>¬´–ù–µ –≤–∏–∂—É –±—É–∫–≤¬ª</strong>.</p>
        </div>
        """, unsafe_allow_html=True)
    
    st_autorefresh(interval=REFRESH_INTERVAL, key=f"intro_refresh_{idx}")
    st.stop()

if st.session_state.phase_start_time is None:
    st.session_state.phase_start_time = time.time()

elapsed = time.time() - st.session_state.phase_start_time
remaining = max(0, TIME_LIMIT - elapsed)

st.markdown(f"### –í–æ–ø—Ä–æ—Å ‚Ññ{cur['‚Ññ']} –∏–∑ {total}")
render_timer(math.ceil(remaining), f"question_{idx}")

with st.container():
    if remaining > 0:
        components.html(f"""
        <style>
            .image-container {{
                display: flex;
                justify-content: center;
                align-items: center;
                height: 300px;
                margin: 10px 0;
            }}
            .image-container img {{
                max-width: 100%;
                max-height: 100%;
                object-fit: contain;
            }}
        </style>
        <div class="image-container">
            <img src="{cur['img']}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞">
        </div>
        """, height=310)
    else:
        st.markdown("""
        <style>
            .timeout-message {
                text-align: center;
                padding: 50px;
                background: #f0f0f0;
                border-radius: 10px;
                margin: 20px 0;
                color: #666;
            }
        </style>
        <div class="timeout-message">
            –í—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.
        </div>
        """, unsafe_allow_html=True)

st.markdown("---")

if cur["qtype"] == "corners":
    sel = st.radio(cur["prompt"],
                   ["–î–∞, —É–≥–ª—ã –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞.", "–ù–µ—Ç, —É–≥–ª—ã –æ–∫—Ä–∞—à–µ–Ω—ã –≤ —Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞.", "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å."],
                   index=None, key=f"r_{idx}")
    if sel:
        finish("–¥–∞" if sel.startswith("–î–∞") else "–Ω–µ—Ç" if sel.startswith("–ù–µ—Ç") else "–∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å")
else:
    txt = st.text_input(cur["prompt"], key=f"t_{idx}", placeholder="–í–≤–µ–¥–∏—Ç–µ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –Ω–∞–∂–º–∏—Ç–µ Enter")
    col1, _ = st.columns([1, 3])
    with col1:
        if st.button("–ù–µ –≤–∏–∂—É –±—É–∫–≤", key=f"s_{idx}"): 
            finish("–ù–µ –≤–∏–∂—É")
    if txt:
        if re.fullmatch(r"[–ê-–Ø–∞-—è–Å—ë ,.;:-]+", txt): 
            finish(txt.strip())
        else: 
            st.error("–î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏.")

if remaining > 0:
    st_autorefresh(interval=1000, key=f"question_refresh_{idx}")










