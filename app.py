from __future__ import annotations
import streamlit as st
import streamlit.components.v1 as components
from streamlit_autorefresh import st_autorefresh
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import random
import time
import datetime
import secrets
import threading
import queue
import re
import itertools
import math
from typing import List, Dict, Optional
import logging
from contextlib import contextmanager
from functools import lru_cache


MOBILE_QS_FLAG = "mobile"
BASE_URL = "https://storage.yandexcloud.net/test3123234442"
TIME_LIMIT = 15
INTRO_TIME_REST = 3
REFRESH_INTERVAL = 1000  
MAX_RETRY_ATTEMPTS = 3
QUEUE_TIMEOUT = 5


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

st.set_page_config(
    page_title="–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
    page_icon="üéØ",
    layout="centered",
    initial_sidebar_state="collapsed"
)


st.markdown("""
<style>
    .stApp { background-color: #FFFFFF; }
    div[data-testid="stSidebar"] { display: none; }
    .main-timer { 
        background: #f0f2f6; 
        padding: 10px; 
        border-radius: 8px; 
        text-align: center; 
        font-weight: bold;
        margin: 10px 0;
    }
    .question-container {
        background: #fafafa;
        padding: 20px;
        border-radius: 10px;
        margin: 20px 0;
    }
    .intro-text {
        background: #e8f4f8;
        padding: 20px;
        border-radius: 10px;
        margin: 20px 0;
    }
</style>
""", unsafe_allow_html=True)


q = st.query_params if hasattr(st, "query_params") else st.experimental_get_query_params()
if q.get(MOBILE_QS_FLAG) == ["1"]:
    st.markdown("""
    <div style='text-align: center; padding: 50px;'>
        <h2>–£–≤–∞–∂–∞–µ–º—ã–π —É—á–∞—Å—Ç–Ω–∏–∫</h2>
        <p>–î–∞–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å <strong>–ü–ö –∏–ª–∏ –Ω–æ—É—Ç–±—É–∫–∞</strong>.</p>
    </div>
    """, unsafe_allow_html=True)
    st.stop()


GROUPS = ["img1_dif_corners", "img2_dif_corners", "img3_same_corners_no_symb", 
          "img4_same_corners", "img5_same_corners"]
ALGS = ["pca_rgb_result", "socolov_lab_result", "socolov_rgb_result", "umap_rgb_result"]
CORNER = {
    "img1_dif_corners": "–Ω–µ—Ç",
    "img2_dif_corners": "–Ω–µ—Ç",
    "img3_same_corners_no_symb": "–¥–∞",
    "img4_same_corners": "–¥–∞",
    "img5_same_corners": "–¥–∞"
}
LETTER = {
    "img1_dif_corners": "–∂",
    "img2_dif_corners": "—Ñ—è",
    "img3_same_corners_no_symb": "–ù–µ –≤–∏–∂—É",
    "img4_same_corners": "–∞–±",
    "img5_same_corners": "—é—ç—ã"
}


@lru_cache(maxsize=256)
def url(g: str, a: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    return f"{BASE_URL}/{g}_{a}.png"

def clean(s: str) -> set[str]:
    return set(re.sub(r"[ ,.;:-]+", "", s.lower()))

def render_timer(sec: int):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    st.markdown(
        f'<div class="main-timer">–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {sec} —Å–µ–∫</div>',
        unsafe_allow_html=True
    )


@st.cache_resource(show_spinner="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
def get_sheet() -> Optional[gspread.Worksheet]:

    try:
        scopes = [
            "https://spreadsheets.google.com/feeds",
            "https://www.googleapis.com/auth/drive"
        ]
        creds = ServiceAccountCredentials.from_json_keyfile_dict(
            dict(st.secrets["gsp"]), scopes
        )
        gc = gspread.authorize(creds)
        sheet = gc.open("human_study_results").sheet1
        logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets")
        return sheet
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
        return None


SHEET = get_sheet()


log_queue = queue.Queue(maxsize=100)

def async_writer():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ Google Sheets —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    while True:
        try:
            
            row_data = log_queue.get(timeout=QUEUE_TIMEOUT)
            
            if row_data is None:
                break
                
            if SHEET:
                retry_count = 0
                while retry_count < MAX_RETRY_ATTEMPTS:
                    try:
                        SHEET.append_row(row_data)
                        logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞: {row_data[1]}")
                        break
                    except Exception as e:
                        retry_count += 1
                        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {retry_count}/{MAX_RETRY_ATTEMPTS} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                        time.sleep(1)
                        
            log_queue.task_done()
            
        except queue.Empty:
            continue
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ writer: {e}")


writer_thread = threading.Thread(target=async_writer, daemon=True)
writer_thread.start()


@st.cache_data
def make_questions() -> List[Dict]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    pg = {g: [] for g in GROUPS}
    
    for g, a in itertools.product(GROUPS, ALGS):
        pg[g].extend([
            {
                "group": g,
                "alg": a,
                "img": url(g, a),
                "qtype": "corners",
                "prompt": "–ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π –∏ –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª ‚Äî –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞?",
                "correct": CORNER[g]
            },
            {
                "group": g,
                "alg": a,
                "img": url(g, a),
                "qtype": "letters",
                "prompt": "–ï—Å–ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤—ã –≤–∏–¥–∏—Ç–µ –±—É–∫–≤—ã, —Ç–æ —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ.",
                "correct": LETTER[g]
            }
        ])
    

    for v in pg.values():
        random.shuffle(v)
    

    seq, prev = [], None
    while any(pg.values()):
        choices = [g for g in GROUPS if pg[g] and g != prev] or [g for g in GROUPS if pg[g]]
        prev = random.choice(choices)
        seq.append(pg[prev].pop())
    

    for n, q in enumerate(seq, 1):
        q["‚Ññ"] = n
    
    return seq


if "initialized" not in st.session_state:
    st.session_state.update(
        initialized=True,
        questions=make_questions(),
        idx=0,
        name="",
        phase="intro",
        phase_start_time=None,
        pause_until=0,
        last_refresh=0  
    )


current_time = time.time()
if st.session_state.pause_until > current_time and st.session_state.idx < len(st.session_state.questions):
    st.markdown(
        '<div style="text-align: center; padding: 20px;">–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É...</div>',
        unsafe_allow_html=True
    )

    if current_time - st.session_state.get('last_refresh', 0) > 0.5:
        st.session_state.last_refresh = current_time
        st_autorefresh(interval=500, key=f"pause_{int(st.session_state.pause_until)}")
    st.stop()


if not st.session_state.name:
    st.markdown("""
    <div class="intro-text">
        <h2 style="text-align: center;">–£–≤–∞–∂–∞–µ–º—ã–π —É—á–∞—Å—Ç–Ω–∏–∫,<br>–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ –∏–∑—É—á–µ–Ω–∏—é –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.</h2>
        
        <h3>–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç</h3>
        <p>–í —Ö–æ–¥–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö, 
        –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ. –í—Å–µ–≥–æ –≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ <strong>40</strong> –≤–æ–ø—Ä–æ—Å–æ–≤. 
        –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 10-15 –º–∏–Ω—É—Ç.</p>
        
        <p><strong>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç —Å–ø–æ–∫–æ–π–Ω–æ: –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ—Ü–µ–Ω–∫—É –∏—Å–ø—ã—Ç—É–µ–º—ã—Ö.
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–¥–∞—é—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ä–∞–∑–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.</strong></p>
        
        <h3>–ß—Ç–æ —ç—Ç–æ –∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è?</h3>
        <p>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤. –ù–∏ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ¬´—ç—Ç–∞–ª–æ–Ω–æ–º¬ª.
        –¶–µ–ª—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ ‚Äî –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª—É—á—à–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.</p>
        
        <h3>–í–∞–∂–Ω–æ</h3>
        <p>–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–µ–Ω. –ü—Ä–æ—Ö–æ–¥–∏—Ç—å –µ–≥–æ —Å–ª–µ–¥—É–µ—Ç <strong>—Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –∏–ª–∏ –Ω–æ—É—Ç–±—É–∫–µ</strong>.</p>
        
        <p style="text-align: center; margin-top: 20px;">
        –î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º¬ª.</p>
    </div>
    """, unsafe_allow_html=True)
    
    username = st.text_input("", placeholder="–í–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º", key="username", label_visibility="collapsed")
    
    if st.button("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º"):
        st.session_state.name = f"–£—á–∞—Å—Ç–Ω–∏–∫_{secrets.randbelow(900000) + 100000}"
        st.rerun()
    
    if username:
        st.session_state.name = username.strip()
        st.rerun()
    
    st.stop()


def finish_question(answer: str):

    q = st.session_state.questions[st.session_state.idx]
    

    t_ms = int((time.time() - st.session_state.phase_start_time) * 1000) if st.session_state.phase_start_time else 0
    

    if q["qtype"] == "letters":
        ok = clean(answer) == clean(q["correct"])
    else:
        ok = answer.lower() == q["correct"].lower()
    

    log_data = [
        datetime.datetime.utcnow().isoformat(),
        st.session_state.name,
        q["‚Ññ"],
        q["group"],
        q["alg"],
        q["qtype"],
        q["prompt"],
        answer,
        q["correct"],
        t_ms,
        ok
    ]
    
    try:
        log_queue.put_nowait(log_data)
    except queue.Full:
        logger.warning("–û—á–µ—Ä–µ–¥—å –ª–æ–≥–æ–≤ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞")
    

    st.session_state.update(
        idx=st.session_state.idx + 1,
        phase="intro",
        phase_start_time=None,
        pause_until=time.time() + 0.5
    )
    st.rerun()


questions = st.session_state.questions
total = len(questions)
idx = st.session_state.idx


if idx >= total:
    st.markdown("""
    <div style="text-align: center; padding: 50px;">
        <h2>–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ.</h2>
        <h3>–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!</h3>
    </div>
    """, unsafe_allow_html=True)
    st.balloons()

    log_queue.put(None)
    st.stop()

current_question = questions[idx]


if st.session_state.phase == "intro":

    if idx < 5:
        if current_question['qtype'] == 'corners':
            instruction_text = """
            <div class="question-container">
                <p>–°–µ–π—á–∞—Å –≤—ã —É–≤–∏–¥–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –¶–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –¥–∏–∞–º–µ—Ç—Ä–∞–ª—å–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —É–≥–ª—ã,
                <strong>–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π –∏ –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π</strong>, –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –æ–∫—Ä–∞—à–µ–Ω—ã –ª–∏ –æ–Ω–∏ –≤ –æ–¥–∏–Ω —Ü–≤–µ—Ç.</p>
                
                <p>–ö–∞—Ä—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ <strong>15 —Å–µ–∫—É–Ω–¥</strong>. –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.</p>
            </div>
            """
        else:
            instruction_text = """
            <div class="question-container">
                <p>–°–µ–π—á–∞—Å –≤—ã —É–≤–∏–¥–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –¶–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ
                <strong>–±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞</strong>.</p>
                
                <p>–ù–∞–π–¥–µ–Ω–Ω—ã–µ –±—É–∫–≤—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ: –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
                –ø—Ä–æ–±–µ–ª–∞–º–∏, –∑–∞–ø—è—Ç—ã–º–∏ –∏ —Ç. –¥., –∞ —Ç–∞–∫–∂–µ —Å–ª–∏—Ç–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.</p>
                
                <p>–ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–∞—Ä—Ç–∏–Ω–∫–∞—Ö –±—É–∫–≤ –Ω–µ—Ç ‚Äî —Ç–æ–≥–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <strong>¬´–ù–µ –≤–∏–∂—É –±—É–∫–≤¬ª</strong>.</p>
            </div>
            """
        
        st.markdown(instruction_text, unsafe_allow_html=True)
        
        if st.button("–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É", key=f"go_{idx}"):
            st.session_state.update(phase="question", phase_start_time=None)
            st.rerun()
        st.stop()
    

    if st.session_state.phase_start_time is None:
        st.session_state.phase_start_time = time.time()
    
    remaining = INTRO_TIME_REST - (time.time() - st.session_state.phase_start_time)
    
    if remaining <= 0:
        st.session_state.update(phase="question", phase_start_time=None)
        st.rerun()
    
    render_timer(math.ceil(remaining))
    
 
    if current_question["qtype"] == "corners":
        st.markdown("""
        <div class="question-container">
            <h3>–ù–∞—á–∞–ª–æ –ø–æ–∫–∞–∑–∞ ‚Äî —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è</h3>
            <p>–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, –æ–∫—Ä–∞—à–µ–Ω—ã –ª–∏ <strong>–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π –∏ –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π</strong> —É–≥–ª—ã –≤ –æ–¥–∏–Ω —Ü–≤–µ—Ç.</p>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown("""
        <div class="question-container">
            <h3>–ù–∞—á–∞–ª–æ –ø–æ–∫–∞–∑–∞ ‚Äî —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è</h3>
            <p>–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, –µ—Å—Ç—å –ª–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ <strong>–±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞</strong>.</p>
        </div>
        """, unsafe_allow_html=True)
    

    if current_time - st.session_state.get('last_refresh', 0) > 0.9:
        st.session_state.last_refresh = current_time
        st_autorefresh(interval=REFRESH_INTERVAL, key=f"intro_refresh_{idx}")
    st.stop()


if st.session_state.phase_start_time is None:
    st.session_state.phase_start_time = time.time()

elapsed = time.time() - st.session_state.phase_start_time
remaining = max(0, TIME_LIMIT - elapsed)


st.markdown(f"### –í–æ–ø—Ä–æ—Å ‚Ññ{current_question['‚Ññ']} –∏–∑ {total}")
render_timer(math.ceil(remaining))


with st.container():
    if remaining > 0:
        st.image(current_question["img"], use_column_width=True)
    else:
        st.markdown(
            '<div style="text-align: center; padding: 100px; background: #f0f0f0;">–í—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.</div>',
            unsafe_allow_html=True
        )

st.markdown("---")


if current_question["qtype"] == "corners":
    selection = st.radio(
        current_question["prompt"],
        ["–î–∞, —É–≥–ª—ã –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞.", "–ù–µ—Ç, —É–≥–ª—ã –æ–∫—Ä–∞—à–µ–Ω—ã –≤ —Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞.", "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å."],
        index=None,
        key=f"r_{idx}"
    )
    
    if selection:
        if selection.startswith("–î–∞"):
            finish_question("–¥–∞")
        elif selection.startswith("–ù–µ—Ç"):
            finish_question("–Ω–µ—Ç")
        else:
            finish_question("–∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å")
else:
    text_input = st.text_input(
        current_question["prompt"],
        key=f"t_{idx}",
        placeholder="–í–≤–µ–¥–∏—Ç–µ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –Ω–∞–∂–º–∏—Ç–µ Enter"
    )
    
    col1, _ = st.columns([1, 3])
    with col1:
        if st.button("–ù–µ –≤–∏–∂—É –±—É–∫–≤", key=f"s_{idx}"):
            finish_question("–ù–µ –≤–∏–∂—É")
    
    if text_input:
        if re.fullmatch(r"[–ê-–Ø–∞-—è–Å—ë ,.;:-]+", text_input):
            finish_question(text_input.strip())
        else:
            st.error("–î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏.")


if remaining > 0 and current_time - st.session_state.get('last_refresh', 0) > 0.9:
    st.session_state.last_refresh = current_time
    st_autorefresh(interval=1000, key=f"question_refresh_{idx}")





