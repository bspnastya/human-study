from __future__ import annotations
import random, time, datetime, secrets, threading, queue, re, itertools, math
from typing import List, Dict

import streamlit as st
from streamlit_autorefresh import st_autorefresh
import streamlit.components.v1 as components
import gspread
from oauth2client.service_account import ServiceAccountCredentials


MOBILE_QS_FLAG = "mobile"
st.set_page_config(
    page_title="–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
    page_icon="üéØ",
    layout="centered",
    initial_sidebar_state="collapsed",
)

components.html(
    """
<script>
(function() {{
  const flag='{flag}', isMobile = window.innerWidth < 1024;
  if (isMobile) document.documentElement.classList.add('mobile-client');
  const qs = new URLSearchParams(window.location.search);
  if (isMobile && !qs.has(flag)) {{ qs.set(flag,'1'); window.location.search = qs.toString(); }}
}})();
</script>""".format(flag=MOBILE_QS_FLAG),
    height=0,
)

q = st.query_params if hasattr(st, "query_params") else st.experimental_get_query_params()
if q.get(MOBILE_QS_FLAG) == ["1"]:
    st.markdown(
        '''
<style>
body{background:#808080;color:#fff;text-align:center;display:flex;align-items:center;justify-content:center;height:100vh;margin:0;}
h2{margin:0 auto;line-height:1.4;font-size:1.3rem;font-weight:500;}
</style>
<h2>–£–≤–∞–∂–∞–µ–º—ã–π —É—á–∞—Å—Ç–Ω–∏–∫<br>–î–∞–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å <strong>–ü–ö –∏–ª–∏ –Ω–æ—É—Ç–±—É–∫–∞</strong>.</h2>
''',
        unsafe_allow_html=True,
    )
    st.stop()


BASE_URL = "https://storage.yandexcloud.net/test3123234442"
TIME_LIMIT = 15
INTRO_TIME_BTN = 0
INTRO_TIME_AUTO = 3

@st.cache_resource(show_spinner="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ‚Ä¶")
def get_sheet():
    try:
        scopes=[
            "https://spreadsheets.google.com/feeds",
            "https://www.googleapis.com/auth/drive",
        ]
        gc = gspread.authorize(
            ServiceAccountCredentials.from_json_keyfile_dict(
                dict(st.secrets["gsp"]), scopes
            )
        )
        return gc.open("human_study_results").sheet1
    except:
        return None

SHEET = get_sheet()

GROUPS = [
    "img1_dif_corners",
    "img2_dif_corners",
    "img3_same_corners_no_symb",
    "img4_same_corners",
    "img5_same_corners",
]
ALGS = [
    "pca_rgb_result",
    "socolov_lab_result",
    "socolov_rgb_result",
    "umap_rgb_result",
]
CORNER = {
    "img1_dif_corners": "–Ω–µ—Ç",
    "img2_dif_corners": "–Ω–µ—Ç",
    "img3_same_corners_no_symb": "–¥–∞",
    "img4_same_corners": "–¥–∞",
    "img5_same_corners": "–¥–∞",
}
LETTER = {
    "img1_dif_corners": "–∂",
    "img2_dif_corners": "—Ñ—è",
    "img3_same_corners_no_symb": "–ù–µ –≤–∏–∂—É",
    "img4_same_corners": "–∞–±",
    "img5_same_corners": "—é—ç—ã",
}

def url(g: str, a: str) -> str:
    return f"{BASE_URL}/{g}_{a}.png"

def clean(s: str) -> set[str]:
    return set(re.sub(r"[ ,.;:-]+", "", s.lower()))

def make_qs() -> List[Dict]:
    pg = {g: [] for g in GROUPS}
    for g, a in itertools.product(GROUPS, ALGS):
        pg[g] += [
            {
                "group": g,
                "alg": a,
                "img": url(g, a),
                "qtype": "corners",
                "prompt": "–ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π –∏ –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª ‚Äî –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞?",
                "correct": CORNER[g],
            },
            {
                "group": g,
                "alg": a,
                "img": url(g, a),
                "qtype": "letters",
                "prompt": "–ï—Å–ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤—ã –≤–∏–¥–∏—Ç–µ –±—É–∫–≤—ã, —Ç–æ —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ.",
                "correct": LETTER[g],
            },
        ]
    for v in pg.values():
        random.shuffle(v)
    seq, prev = [], None
    while any(pg.values()):
        choices = [g for g in GROUPS if pg[g] and g != prev] or [
            g for g in GROUPS if pg[g]
        ]
        prev = random.choice(choices)
        seq.append(pg[prev].pop())
    for n, q in enumerate(seq, 1):
        q["‚Ññ"] = n
    return seq


def init_state():
    st.session_state.questions = make_qs()
    st.session_state.idx = 0
    st.session_state.name = ""
    st.session_state.phase = "intro"
    st.session_state.phase_start = None
    st.session_state.pause_until = 0
    st.session_state.initialized = True

if "initialized" not in st.session_state:
    init_state()

log_q = queue.Queue()

def writer():
    batch = []
    while True:
        row = log_q.get()
        batch.append(row)
        log_q.task_done()
        if len(batch) >= 5:
            if SHEET:
                try:
                    SHEET.append_rows(batch, value_input_option="RAW")
                except:
                    pass
            batch.clear()

threading.Thread(target=writer, daemon=True).start()

def render_timer(sec: int, key: str):
    st.markdown(
        f'<div style="font-size:1.2rem;font-weight:bold;color:#111;margin-bottom:10px;">–û—Å—Ç–∞–ª–æ—Å—å&nbsp;–≤—Ä–µ–º–µ–Ω–∏: {sec}&nbsp;—Å–µ–∫</div>',
        unsafe_allow_html=True,
        key=key,
    )

def finish(answer: str):
    q = st.session_state.questions[st.session_state.idx]
    t_ms = (
        int((time.time() - st.session_state.phase_start) * 1000)
        if st.session_state.phase_start
        else 0
    )
    ok = (
        clean(answer) == clean(q["correct"])
        if q["qtype"] == "letters"
        else answer.lower() == q["correct"].lower()
    )
    log_q.put(
        [
            datetime.datetime.utcnow().isoformat(),
            st.session_state.name,
            q["‚Ññ"],
            q["group"],
            q["alg"],
            q["qtype"],
            q["prompt"],
            answer,
            q["correct"],
            t_ms,
            ok,
        ]
    )
    st.session_state.idx += 1
    st.session_state.phase = "intro"
    st.session_state.phase_start = None
    st.session_state.pause_until = time.time() + 0.5
    st.experimental_rerun()

if st.session_state.pause_until > time.time() and st.session_state.idx < len(
    st.session_state.questions
):
    st.markdown(
        "<div style='text-align:center;font-size:1.5rem;color:#fff;background:#262626;padding:20px;border-radius:12px;margin-top:50px;'>–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É...</div>",
        unsafe_allow_html=True,
    )
    st_autorefresh(interval=500, key=f"pause_{int(st.session_state.pause_until)}")
    st.stop()

if not st.session_state.name:
    st.markdown(
        '''
<div style="color:#111;">
  <h2>–£–≤–∞–∂–∞–µ–º—ã–π —É—á–∞—Å—Ç–Ω–∏–∫,<br>–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ –∏–∑—É—á–µ–Ω–∏—é –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.</h2>
  <p><b>–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç</b><br>
  –í —Ö–æ–¥–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö, 
  –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ. –í—Å–µ–≥–æ –≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ <b>40</b> –≤–æ–ø—Ä–æ—Å–æ–≤. 
  –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 10-15 –º–∏–Ω—É—Ç.</p>
  <p><b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç —Å–ø–æ–∫–æ–π–Ω–æ: –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ—Ü–µ–Ω–∫—É –∏—Å–ø—ã—Ç—É–µ–º—ã—Ö.
  –û—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–¥–∞—é—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ä–∞–∑–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.</b></p>
  <p><b>–ß—Ç–æ —ç—Ç–æ –∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è?</b><br>
  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤. –ù–∏ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ¬´—ç—Ç–∞–ª–æ–Ω–æ–º¬ª.
  –¶–µ–ª—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ ‚Äî –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª—É—á—à–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.</p>
  <p><b>–í–∞–∂–Ω–æ</b><br>
  –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–µ–Ω. –ü—Ä–æ—Ö–æ–¥–∏—Ç—å –µ–≥–æ —Å–ª–µ–¥—É–µ—Ç <b>—Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –∏–ª–∏ –Ω–æ—É—Ç–±—É–∫–µ</b>.</p>
  <p>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º¬ª.</p>
</div>''',
        unsafe_allow_html=True,
    )
    u = st.text_input("", placeholder="–í–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º", key="username", label_visibility="collapsed")
    if st.button("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º"):
        st.session_state.name = f"–£—á–∞—Å—Ç–Ω–∏–∫_{secrets.randbelow(900000)+100000}"
        st.experimental_rerun()
    if u:
        st.session_state.name = u.strip()
        st.experimental_rerun()
    st.stop()

qs = st.session_state.questions
total = len(qs)
idx = st.session_state.idx

if idx >= total:
    st.markdown(
        "<div style='margin-top:50px;padding:40px;text-align:center;font-size:2rem;color:#fff;background:#262626;border-radius:12px;'>–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ.<br><b>–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!</b></div>",
        unsafe_allow_html=True,
    )
    st.balloons()
    st.stop()

cur = qs[idx]

if st.session_state.phase == "intro":
    if st.session_state.phase_start is None:
        st.session_state.phase_start = time.time()

    if idx < 5:
        st.markdown(
            f"<div style='font-size:1.1rem;line-height:1.6;margin-bottom:30px;'>{'–¶–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –¥–∏–∞–º–µ—Ç—Ä–∞–ª—å–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —É–≥–ª—ã, <b>–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π –∏ –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π</b>, –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –æ–∫—Ä–∞—à–µ–Ω—ã –ª–∏ –æ–Ω–∏ –≤ –æ–¥–∏–Ω —Ü–≤–µ—Ç.' if cur['qtype']=='corners' else '–¶–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ <b>–±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞</b>.'}<br><br>–ö–∞—Ä—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ <b>{TIME_LIMIT}&nbsp;—Å–µ–∫—É–Ω–¥</b>. –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.</div>",
            unsafe_allow_html=True,
        )
        if st.button("–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É"):
            st.session_state.phase = "question"
            st.session_state.phase_start = None
            st.experimental_rerun()
        st.stop()

    remaining_intro = INTRO_TIME_AUTO - (time.time() - st.session_state.phase_start)
    if remaining_intro <= 0:
        st.session_state.phase = "question"
        st.session_state.phase_start = None
        st.experimental_rerun()

    render_timer(math.ceil(remaining_intro), "intro_timer")
    st_autorefresh(interval=1000, key=f"intro_{idx}")
    st.stop()

if st.session_state.phase_start is None:
    st.session_state.phase_start = time.time()

elapsed = time.time() - st.session_state.phase_start
remaining = max(0, TIME_LIMIT - elapsed)

st.markdown(f"### –í–æ–ø—Ä–æ—Å ‚Ññ{cur['‚Ññ']} –∏–∑ {total}")
render_timer(math.ceil(remaining), "question_timer")

if remaining > 0:
    st.image(cur["img"], width=300)
else:
    st.markdown(
        "<div style='text-align:left;font-style:italic;color:#666;padding:40px 0;'>–í—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.</div>",
        unsafe_allow_html=True,
    )

st.markdown("---")

if cur["qtype"] == "corners":
    sel = st.radio(
        cur["prompt"],
        [
            "–î–∞, —É–≥–ª—ã –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞.",
            "–ù–µ—Ç, —É–≥–ª—ã –æ–∫—Ä–∞—à–µ–Ω—ã –≤ —Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞.",
            "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å.",
        ],
        index=None,
    )
    if sel:
        finish("–¥–∞" if sel.startswith("–î–∞") else "–Ω–µ—Ç" if sel.startswith("–ù–µ—Ç") else "–∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å")
else:
    txt = st.text_input(cur["prompt"], placeholder="–í–≤–µ–¥–∏—Ç–µ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –Ω–∞–∂–º–∏—Ç–µ Enter")
    col1, _ = st.columns([1, 3])
    with col1:
        if st.button("–ù–µ –≤–∏–∂—É –±—É–∫–≤"):
            finish("–ù–µ –≤–∏–∂—É")
    if txt:
        if re.fullmatch(r"[–ê-–Ø–∞-—è–Å—ë ,.;:-]+", txt):
            finish(txt.strip())
        else:
            st.error("–î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏.")

if remaining > 0:
    st_autorefresh(interval=1000, key=f"question_{idx}")


