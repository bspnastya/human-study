from __future__ import annotations
from streamlit_autorefresh import st_autorefresh
import random, time, datetime, secrets, threading, queue, re, itertools, math
from typing import List, Dict
import streamlit as st
import streamlit.components.v1 as components
import gspread
from oauth2client.service_account import ServiceAccountCredentials

st.set_page_config(
    page_title="–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
    page_icon="üéØ", 
    layout="centered", 
    initial_sidebar_state="collapsed"
)


BASE_URL = "https://storage.yandexcloud.net/test3123234442"
TIME_LIMIT = 15  
INTRO_TIME_FIRST = 8 
INTRO_TIME_REST = 3   
REFRESH_INTERVAL = 500  


st.markdown("""
<style>
html,body,.stApp,[data-testid="stAppViewContainer"],.main,.block-container{
    background:#808080!important;color:#111!important;
}
h1,h2,h3,h4,h5,h6{color:#111!important;}
header[data-testid="stHeader"]{display:none;}
.stButton>button{
    min-height:52px!important;
    padding:0 20px!important;
    border:1px solid #555!important;
    background:#222!important;
    color:#ddd!important;
    border-radius:8px;
}
input[data-testid="stTextInput"]{
    height:52px!important;
    padding:0 16px!important;
    font-size:1.05rem;
}
#mobile-overlay{
    position:fixed;
    top:0;
    left:0;
    width:100%;
    height:100%;
    z-index:999999;
    background:#808080;
    display:none;
    align-items:center;
    justify-content:center;
    color:#fff;
    font:500 1.2rem/1.5 sans-serif;
    text-align:center;
    padding:0 20px;
}
@media (max-width:1023px){
    #mobile-overlay{
        display:flex!important;
    }
    body {
        overflow:hidden!important;
    }
}
* {
    -webkit-backface-visibility: hidden;
    -webkit-transform: translateZ(0) scale(1.0, 1.0);
    transform: translateZ(0);
}
.stApp > div {
    transition: opacity 0.1s ease-in-out;
}
.element-container {
    will-change: transform;
}
body {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}
.main > div {
    min-height: 100vh;
}
</style>
<div id="mobile-overlay">
    –£–≤–∞–∂–∞–µ–º—ã–π&nbsp;—É—á–∞—Å—Ç–Ω–∏–∫,<br>
    –¥–∞–Ω–Ω–æ–µ&nbsp;–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å&nbsp;–ü–ö –∏–ª–∏&nbsp;–Ω–æ—É—Ç–±—É–∫–∞.
</div>
""", unsafe_allow_html=True)


def render_timer(seconds: int, timer_id: str):
    
    components.html(f"""
    <div style="font-size:1.2rem;font-weight:bold;color:#111;margin-bottom:10px;margin-left:-8px;">
        –û—Å—Ç–∞–ª–æ—Å—å&nbsp;–≤—Ä–µ–º–µ–Ω–∏: <span id="timer-{timer_id}">{seconds}</span>&nbsp;—Å–µ–∫
    </div>
    <script>
    (function() {{
        const timerId = 'timer-{timer_id}';
        const spanElement = document.getElementById(timerId);
        let timeLeft = {seconds};
        
        if (window['interval_' + timerId]) {{
            clearInterval(window['interval_' + timerId]);
        }}
        
        window['interval_' + timerId] = setInterval(function() {{
            timeLeft--;
            if (spanElement) {{
                spanElement.textContent = Math.max(0, timeLeft);
            }}
            
            if (timeLeft <= 0) {{
                clearInterval(window['interval_' + timerId]);
            }}
        }}, 1000);
        
        window.addEventListener('beforeunload', function() {{
            if (window['interval_' + timerId]) {{
                clearInterval(window['interval_' + timerId]);
            }}
        }});
    }})();
    </script>
    """, height=50)


@st.cache_resource(show_spinner="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
def get_sheet():
    try:
        scopes = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        gc = gspread.authorize(ServiceAccountCredentials.from_json_keyfile_dict(dict(st.secrets["gsp"]), scopes))
        return gc.open("human_study_results").sheet1
    except Exception:
        return None


SHEET = get_sheet()
log_queue = queue.Queue()

def log_writer():
    while True:
        try:
            row = log_queue.get()
            if SHEET:
                SHEET.append_row(row)
            log_queue.task_done()
        except:
            pass

threading.Thread(target=log_writer, daemon=True).start()


GROUPS = ["img1_dif_corners", "img2_dif_corners", "img3_same_corners_no_symb", "img4_same_corners", "img5_same_corners"]
ALGS = ["pca_rgb_result", "socolov_lab_result", "socolov_rgb_result", "umap_rgb_result"]
CORNER_ANS = {
    "img1_dif_corners": "–Ω–µ—Ç",
    "img2_dif_corners": "–Ω–µ—Ç",
    "img3_same_corners_no_symb": "–¥–∞",
    "img4_same_corners": "–¥–∞",
    "img5_same_corners": "–¥–∞"
}
LETTER_ANS = {
    "img1_dif_corners": "–∂",
    "img2_dif_corners": "—Ñ—è",
    "img3_same_corners_no_symb": "–ù–µ –≤–∏–∂—É",
    "img4_same_corners": "–∞–±",
    "img5_same_corners": "—é—ç—ã"
}


def file_url(group: str, alg: str) -> str:
    return f"{BASE_URL}/{group}_{alg}.png"


def letters_set(s: str) -> set[str]:
    return set(re.sub(r"[ ,.;:-]+", "", s.lower()))


def make_questions() -> List[Dict]:
    per_group = {g: [] for g in GROUPS}
    
    for g, a in itertools.product(GROUPS, ALGS):
        per_group[g].extend([
            {
                "group": g, "alg": a, "img": file_url(g, a), 
                "qtype": "corners", 
                "prompt": "–ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π –∏ –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª ‚Äî –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞?", 
                "correct": CORNER_ANS[g]
            },
            {
                "group": g, "alg": a, "img": file_url(g, a), 
                "qtype": "letters", 
                "prompt": "–ï—Å–ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤—ã –≤–∏–¥–∏—Ç–µ –±—É–∫–≤—ã, —Ç–æ —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ.", 
                "correct": LETTER_ANS[g]
            }
        ])
    
    for questions in per_group.values():
        random.shuffle(questions)
    
    sequence = []
    prev_group = None
    
    while any(per_group.values()):
        available = [g for g in GROUPS if per_group[g] and g != prev_group]
        if not available:
            available = [g for g in GROUPS if per_group[g]]
        
        chosen_group = random.choice(available)
        sequence.append(per_group[chosen_group].pop())
        prev_group = chosen_group
    
    for n, q in enumerate(sequence, 1):
        q["‚Ññ"] = n
    
    return sequence


if "initialized" not in st.session_state:
    st.session_state.initialized = True
    st.session_state.questions = make_questions()
    st.session_state.idx = 0
    st.session_state.name = ""
    st.session_state.phase = "intro"  
    st.session_state.phase_start_time = None
    st.session_state.pause_until = 0


if st.session_state.pause_until > time.time():
    st.markdown(
        "<div style='text-align:center;font-size:1.5rem;color:#fff;background:#262626;padding:20px;border-radius:12px;margin-top:50px;'>"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É..."
        "</div>", 
        unsafe_allow_html=True
    )
    st_autorefresh(interval=200, key="pause_refresh")
    st.stop()


if not st.session_state.name:
    st.markdown("""
    <div style="color:#111;">
        <h2>–£–≤–∞–∂–∞–µ–º—ã–π —É—á–∞—Å—Ç–Ω–∏–∫,<br>–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ –∏–∑—É—á–µ–Ω–∏—é –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.</h2>
        <p><b>–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç</b><br>
        –í —Ö–æ–¥–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö, 
        –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ. –í—Å–µ–≥–æ –≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ <b>40</b> –≤–æ–ø—Ä–æ—Å–æ–≤. 
        –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 10-15 –º–∏–Ω—É—Ç.</p>
        <p><b>–ß—Ç–æ —ç—Ç–æ –∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è?</b><br>
        –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤. –ù–∏ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ¬´—ç—Ç–∞–ª–æ–Ω–æ–º¬ª. 
        –¶–µ–ª—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ ‚Äî –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª—É—á—à–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.</p>
        <p><b>–í–∞–∂–Ω–æ</b><br>
        –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–µ–Ω. –ü—Ä–æ—Ö–æ–¥–∏—Ç—å –µ–≥–æ —Å–ª–µ–¥—É–µ—Ç <b>—Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –∏–ª–∏ –Ω–æ—É—Ç–±—É–∫–µ</b>.</p>
        <p>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º¬ª.</p>
    </div>
    """, unsafe_allow_html=True)
    
    name_input = st.text_input("", placeholder="–§–∞–º–∏–ª–∏—è / –ø—Å–µ–≤–¥–æ–Ω–∏–º", key="username", label_visibility="collapsed")
    
    if st.button("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º"):
        st.session_state.name = f"–£—á–∞—Å—Ç–Ω–∏–∫_{secrets.randbelow(900000) + 100000}"
        st.rerun()
    
    if name_input:
        st.session_state.name = name_input.strip()
        st.rerun()
    
    st.stop()


def finish_answer(answer: str):
    current_q = st.session_state.questions[st.session_state.idx]
    
    time_ms = 0
    if st.session_state.phase_start_time:
        time_ms = int((time.time() - st.session_state.phase_start_time) * 1000)
    
    if current_q["qtype"] == "letters":
        is_correct = letters_set(answer) == letters_set(current_q["correct"])
    else:
        is_correct = answer.lower() == current_q["correct"].lower()
    
    log_queue.put([
        datetime.datetime.utcnow().isoformat(),
        st.session_state.name,
        current_q["‚Ññ"],
        current_q["group"],
        current_q["alg"],
        current_q["qtype"],
        current_q["prompt"],
        answer,
        current_q["correct"],
        time_ms,
        is_correct
    ])
    
    st.session_state.idx += 1
    st.session_state.phase = "intro"
    st.session_state.phase_start_time = None
    st.session_state.pause_until = time.time() + 0.5
    st.rerun()


questions = st.session_state.questions
total_questions = len(questions)
current_idx = st.session_state.idx

if current_idx >= total_questions:
    st.markdown("""
    <div style='margin-top:50px;padding:40px;text-align:center;font-size:2rem;color:#fff;background:#262626;border-radius:12px;'>
        –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ.<br><b>–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!</b>
    </div>
    """, unsafe_allow_html=True)
    st.balloons()
    st.stop()

current_question = questions[current_idx]


if st.session_state.phase == "intro":
    if st.session_state.phase_start_time is None:
        st.session_state.phase_start_time = time.time()
    
    intro_duration = INTRO_TIME_FIRST if current_idx < 5 else INTRO_TIME_REST
    elapsed = time.time() - st.session_state.phase_start_time
    remaining = max(0, intro_duration - elapsed)
    
    if remaining > 0:
     
        render_timer(
            seconds=math.ceil(remaining),
            timer_id=f"intro_{current_idx}"
        )
        

        if current_question["qtype"] == "corners":
            st.markdown("""
            <div style="font-size:1.1rem;line-height:1.6;">
                <b>–ù–∞—á–∞–ª–æ –ø–æ–∫–∞–∑–∞ ‚Äî —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è</b><br><br>
                –°–µ–π—á–∞—Å –≤—ã —É–≤–∏–¥–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –¶–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞
                –¥–∏–∞–º–µ—Ç—Ä–∞–ª—å–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —É–≥–ª—ã, <b>–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π –∏ –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π</b>,
                –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –æ–∫—Ä–∞—à–µ–Ω—ã –ª–∏ –æ–Ω–∏ –≤ –æ–¥–∏–Ω —Ü–≤–µ—Ç.<br><br>
                –ö–∞—Ä—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ <b>15&nbsp;—Å–µ–∫—É–Ω–¥</b>. –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown("""
            <div style="font-size:1.1rem;line-height:1.6;">
                <b>–ù–∞—á–∞–ª–æ –ø–æ–∫–∞–∑–∞ ‚Äî —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è</b><br><br>
                –°–µ–π—á–∞—Å –≤—ã —É–≤–∏–¥–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –¶–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –Ω–∞
                –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ <b>–±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞</b>.<br><br>
                –ù–∞–π–¥–µ–Ω–Ω—ã–µ –±—É–∫–≤—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ: –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
                –ø—Ä–æ–±–µ–ª–∞–º–∏, –∑–∞–ø—è—Ç—ã–º–∏ –∏ —Ç.&nbsp;–¥., –∞ —Ç–∞–∫–∂–µ —Å–ª–∏—Ç–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.<br><br>
                –ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–∞—Ä—Ç–∏–Ω–∫–∞—Ö –±—É–∫–≤ –Ω–µ—Ç ‚Äî —Ç–æ–≥–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´–ù–µ –≤–∏–∂—É –±—É–∫–≤¬ª</b>.
            </div>
            """, unsafe_allow_html=True)
        
  
        st_autorefresh(interval=REFRESH_INTERVAL, key=f"intro_refresh_{current_idx}")
    else:
        
        st.session_state.phase = "question"
        st.session_state.phase_start_time = None
        st.rerun()


else:
    if st.session_state.phase_start_time is None:
        st.session_state.phase_start_time = time.time()
    
    elapsed = time.time() - st.session_state.phase_start_time
    remaining = max(0, TIME_LIMIT - elapsed)
    
    st.markdown(f"### –í–æ–ø—Ä–æ—Å ‚Ññ{current_question['‚Ññ']} –∏–∑ {total_questions}")
    
    render_timer(
        seconds=math.ceil(remaining),
        timer_id=f"question_{current_idx}"
    )
    
    image_container = st.container()
    with image_container:
        if remaining > 0:
            components.html(f"""
            <div id="image-container-{current_idx}" style="text-align:left;margin:5px 0;">
                <img src="{current_question['img']}" width="300" style="border:1px solid #444;border-radius:8px;">
            </div>
            <script>
            setTimeout(function() {{
                const container = document.getElementById('image-container-{current_idx}');
                if (container) {{
                    container.innerHTML = '<div style="font-style:italic;color:#666;padding:20px 0;">–í—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.</div>';
                }}
            }}, {TIME_LIMIT * 1000});
            </script>
            """, height=310)
        else:
            st.markdown(
                "<div style='text-align:left;font-style:italic;color:#666;padding:40px 0;'>"
                "–í—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ."
                "</div>", 
                unsafe_allow_html=True
            )
    
    st.markdown("---")
    
    if current_question["qtype"] == "corners":
        selection = st.radio(
            current_question["prompt"],
            options=[
                "–î–∞, —É–≥–ª—ã –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞.",
                "–ù–µ—Ç, —É–≥–ª—ã –æ–∫—Ä–∞—à–µ–Ω—ã –≤ —Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞.",
                "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å."
            ],
            index=None,
            key=f"radio_{current_idx}"
        )
        
        if selection:
            if selection.startswith("–î–∞"):
                finish_answer("–¥–∞")
            elif selection.startswith("–ù–µ—Ç"):
                finish_answer("–Ω–µ—Ç")
            else:
                finish_answer("–∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å")
    
    else:
        text_input = st.text_input(
            current_question["prompt"],
            key=f"text_{current_idx}",
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –Ω–∞–∂–º–∏—Ç–µ Enter"
        )
        
        col1, col2 = st.columns([1, 3])
        with col1:
            if st.button("–ù–µ –≤–∏–∂—É –±—É–∫–≤", key=f"skip_{current_idx}"):
                finish_answer("–ù–µ –≤–∏–∂—É")
        
        if text_input:
            if re.fullmatch(r"[–ê-–Ø–∞-—è–Å—ë ,.;:-]+", text_input):
                finish_answer(text_input.strip())
            else:
                st.error("–î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏.")
    
    if remaining > 0:
        st_autorefresh(interval=1000, key=f"question_refresh_{current_idx}")

