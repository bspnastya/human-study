from __future__ import annotations
import streamlit as st, streamlit.components.v1 as components
import random, time, datetime, secrets, re, itertools, math, threading, queue, requests, io, atexit, uuid, html, gspread
from typing import List, Dict
from oauth2client.service_account import ServiceAccountCredentials
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

BASE_URL = "https://storage.yandexcloud.net/test3123234442"
TIME_IMG_VISIBLE = 15
INTRO_FIRST = 5
INTRO_REST_SEC = 3
PAUSE_SEC = .5
MOBILE_QS_FLAG = "mobile"
BATCH_LIMIT_CELLS = 450
LOG_Q_MAXSIZE = 1000

GROUPS = ["img1_dif_corners", "img2_dif_corners", "img3_same_corners_no_symb", "img4_same_corners", "img5_same_corners"]
ALGS = ["pca_rgb_result", "socolov_lab_result", "socolov_rgb_result", "umap_rgb_result"]
CORNER = {"img1_dif_corners": "–Ω–µ—Ç", "img2_dif_corners": "–Ω–µ—Ç", "img3_same_corners_no_symb": "–¥–∞", "img4_same_corners": "–¥–∞", "img5_same_corners": "–¥–∞"}
LETTER = {"img1_dif_corners": "–∂", "img2_dif_corners": "—Ñ—è", "img3_same_corners_no_symb": "–ù–µ –≤–∏–∂—É", "img4_same_corners": "–∞–±", "img5_same_corners": "—é—ç—ã"}

WELCOME_HTML = """
<div style="color:#111;">
  <h2>–£–≤–∞–∂–∞–µ–º—ã–π —É—á–∞—Å—Ç–Ω–∏–∫,<br>–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ –∏–∑—É—á–µ–Ω–∏—é –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.</h2>
  <p><b>–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç</b><br>
  –í —Ö–æ–¥–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö,
  –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ. –í—Å–µ–≥–æ –≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ <b>40</b> –≤–æ–ø—Ä–æ—Å–æ–≤.
  –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 10-15 –º–∏–Ω—É—Ç.</p>
  <p><b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç —Å–ø–æ–∫–æ–π–Ω–æ: –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ—Ü–µ–Ω–∫—É –∏—Å–ø—ã—Ç—É–µ–º—ã—Ö.
  –û—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–¥–∞—é—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ä–∞–∑–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.</b></p>
  <p><b>–ß—Ç–æ —ç—Ç–æ –∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è?</b><br>
  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤. –ù–∏ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ¬´—ç—Ç–∞–ª–æ–Ω–æ–º¬ª.
  –¶–µ–ª—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ ‚Äî –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª—É—á—à–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.</p>
  <p><b>–í–∞–∂–Ω–æ</b><br>
  –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–µ–Ω. –ü—Ä–æ—Ö–æ–¥–∏—Ç—å –µ–≥–æ —Å–ª–µ–¥—É–µ—Ç <b>—Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –∏–ª–∏ –Ω–æ—É—Ç–±—É–∫–µ</b>.</p>
  <p>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º¬ª.</p>
</div>
"""

INTRO_CORNERS_TEXT = """
–°–µ–π—á–∞—Å –≤—ã —É–≤–∏–¥–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –¶–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞
–¥–∏–∞–º–µ—Ç—Ä–∞–ª—å–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —É–≥–ª—ã, <b>–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π –∏ –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π</b>,
–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –æ–∫—Ä–∞—à–µ–Ω—ã –ª–∏ –æ–Ω–∏ –≤ –æ–¥–∏–Ω —Ü–≤–µ—Ç.<br><br>
–ö–∞—Ä—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ <b>15&nbsp;—Å–µ–∫—É–Ω–¥</b>. –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.
"""

INTRO_LETTERS_TEXT = """
–°–µ–π—á–∞—Å –≤—ã —É–≤–∏–¥–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –¶–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –Ω–∞
–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ <b>–±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞</b>.<br><br>
–ù–∞–π–¥–µ–Ω–Ω—ã–µ –±—É–∫–≤—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ: –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
–ø—Ä–æ–±–µ–ª–∞–º–∏, –∑–∞–ø—è—Ç—ã–º–∏ –∏ —Ç.&nbsp;–¥., –∞ —Ç–∞–∫–∂–µ —Å–ª–∏—Ç–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.<br><br>
–ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–∞—Ä—Ç–∏–Ω–∫–∞—Ö –±—É–∫–≤ –Ω–µ—Ç ‚Äî —Ç–æ–≥–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´–ù–µ –≤–∏–∂—É –±—É–∫–≤¬ª</b>.
"""

INTRO_CORNERS_TIMED = f"<b>–ù–∞—á–∞–ª–æ –ø–æ–∫–∞–∑–∞ ‚Äî —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è</b><br><br>{INTRO_CORNERS_TEXT}"
INTRO_LETTERS_TIMED = f"<b>–ù–∞—á–∞–ª–æ –ø–æ–∫–∞–∑–∞ ‚Äî —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è</b><br><br>{INTRO_LETTERS_TEXT}"

st.set_page_config("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", "üéØ", layout="centered", initial_sidebar_state="collapsed")

components.html(f"<script>(()=>{{const f='{MOBILE_QS_FLAG}',m=innerWidth<1024,q=new URLSearchParams(location.search);if(m&&!q.has(f)){{q.set(f,'1');location.search=q.toString();}}}})();</script>", height=0)
if st.query_params.get(MOBILE_QS_FLAG) == ["1"]:
    st.markdown("<style>body{background:#808080;color:#fff;text-align:center;display:flex;align-items:center;justify-content:center;height:100vh;margin:0;}h2{font-size:1.3rem;font-weight:500;line-height:1.4}</style><h2>–£–≤–∞–∂–∞–µ–º—ã–π —É—á–∞—Å—Ç–Ω–∏–∫<br>–î–∞–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å <strong>–ü–ö –∏–ª–∏ –Ω–æ—É—Ç–±—É–∫–∞</strong>.</h2>", unsafe_allow_html=True)
    st.stop()

st.markdown("<style>html,body,.stApp,[data-testid=\"stAppViewContainer\"],.main,.block-container{background:#808080;color:#111;}header[data-testid=\"stHeader\"]{display:none;}h1,h2,h3,h4,h5,h6{color:#111!important;}.stButton>button{min-height:52px;padding:0 20px;border:1px solid #555;background:#222;color:#ddd;border-radius:8px;}input[data-testid=\"stTextInput\"]{height:52px;padding:0 16px;font-size:1.05rem;}body,html{scrollbar-gutter:stable;}</style>", unsafe_allow_html=True)

components.html("<script>window.startTimer=(id,sec)=>{clearInterval(window['i_'+id]);let t=sec,s=document.getElementById(id);window['i_'+id]=setInterval(()=>{if(s)s.textContent=Math.max(0,--t);if(t<=0)clearInterval(window['i_'+id]);},1000);}</script>", height=0)
def render_timer(key: str, sec: int):
    components.html(f"<div style='font-size:1.2rem;font-weight:bold;margin-bottom:10px;'>–û—Å—Ç–∞–ª–æ—Å—å&nbsp;–≤—Ä–µ–º–µ–Ω–∏: <span id=\"{key}\">{sec}</span>&nbsp;—Å–µ–∫</div><script>startTimer('{key}',{sec})</script>", height=0)

@st.cache_resource
def sheet():
    scopes = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    gc = gspread.authorize(ServiceAccountCredentials.from_json_keyfile_dict(dict(st.secrets["gsp"]), scopes))
    return gc.open("human_study_results").sheet1
SHEET = sheet()

log_q = queue.Queue(maxsize=LOG_Q_MAXSIZE)
def writer():
    batch, cells = [], 0
    while True:
        row = log_q.get()
        if row != "__FLUSH__":
            batch.append(row); cells += len(row)
        if row == "__FLUSH__" or cells >= BATCH_LIMIT_CELLS:
            if batch:
                try: SHEET.append_rows(batch, value_input_option="RAW")
                except: pass
                batch.clear(); cells = 0
        log_q.task_done()
threading.Thread(target=writer, daemon=True).start()
atexit.register(lambda: log_q.put("__FLUSH__"))

session = requests.Session()
session.headers["User-Agent"] = "HumanStudyClient/1.0"
session.mount("https://", HTTPAdapter(max_retries=Retry(total=3, backoff_factor=.5, status_forcelist=[500, 502, 503, 504])))
@st.cache_data(show_spinner=False)
def fetch_png(url: str) -> bytes:
    return session.get(url, timeout=5).content

def build_questions() -> List[Dict]:
    per = {g: [] for g in GROUPS}
    for g, a in itertools.product(GROUPS, ALGS):
        per[g] += [
            {"group": g, "alg": a, "img": f"{BASE_URL}/{g}_{a}.png", "qtype": "corners", "prompt": "–ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π –∏ –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª ‚Äî –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞?", "correct": CORNER[g]},
            {"group": g, "alg": a, "img": f"{BASE_URL}/{g}_{a}.png", "qtype": "letters", "prompt": "–ï—Å–ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤—ã –≤–∏–¥–∏—Ç–µ –±—É–∫–≤—ã, —Ç–æ —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ.", "correct": LETTER[g]}
        ]
    for v in per.values():
        random.shuffle(v)
    seq, prev = [], None
    while any(per.values()):
        choices = [g for g in GROUPS if per[g] and g != prev] or [g for g in GROUPS if per[g]]
        prev = random.choice(choices)
        seq.append(per[prev].pop())
    for i, q in enumerate(seq, 1):
        q["‚Ññ"] = i
    return seq

def letters_set(s: str) -> set[str]:
    return set(re.sub(r"[ ,.;:-]+", "", s.lower()))

def esc(s: str) -> str:
    return html.escape(s, quote=True)

ss = st.session_state
if "seq" not in ss:
    ss.seq = build_questions(); ss.idx = 0; ss.phase = "intro"; ss.name = ""; ss.sid = str(uuid.uuid4())

if not ss.name:
    st.markdown(WELCOME_HTML, unsafe_allow_html=True)
    nick = st.text_input("", placeholder="–í–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º", label_visibility="collapsed")
    if st.button("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º"):
        ss.name = f"–£—á–∞—Å—Ç–Ω–∏–∫_{secrets.randbelow(900000)+100000}"; st.rerun()
    if nick:
        ss.name = esc(nick.strip()); st.rerun()
    st.stop()

if ss.idx >= len(ss.seq):
    log_q.put("__FLUSH__")
    st.markdown("<div style='margin-top:40px;padding:40px;text-align:center;font-size:2rem;background:#262626;color:#fff;border-radius:12px;'>–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ.<br><b>–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!</b></div>", unsafe_allow_html=True)
    st.balloons(); st.stop()

q = ss.seq[ss.idx]
def save(ans: str):
    t_ms = int((time.time() - ss.t0) * 1000)
    ok = letters_set(ans) == letters_set(q["correct"]) if q["qtype"] == "letters" else ans.lower() == q["correct"].lower()
    log_q.put_nowait([datetime.datetime.utcnow().isoformat(), ss.sid, ss.name, q["‚Ññ"], q["group"], q["alg"], q["qtype"], esc(q["prompt"]), esc(ans), esc(q["correct"]), t_ms, ok])
    ss.idx += 1; ss.phase = "intro"; time.sleep(PAUSE_SEC); st.experimental_rerun()

if ss.phase == "intro":
    if ss.idx < INTRO_FIRST:
        st.markdown(INTRO_CORNERS_TEXT if q["qtype"] == "corners" else INTRO_LETTERS_TEXT, unsafe_allow_html=True)
        fetch_png(q["img"])
        if st.button("–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É"):
            ss.phase = "question"; ss.t0 = time.time(); st.experimental_rerun()
        st.stop()
    if "intro_t0" not in ss: ss.intro_t0 = time.time()
    rem = INTRO_REST_SEC - (time.time() - ss.intro_t0)
    if rem <= 0:
        ss.pop("intro_t0"); ss.phase = "question"; ss.t0 = time.time(); st.experimental_rerun()
    render_timer(f"intro_{q['‚Ññ']}", math.ceil(rem))
    st.markdown(INTRO_CORNERS_TIMED if q["qtype"] == "corners" else INTRO_LETTERS_TIMED, unsafe_allow_html=True)
    fetch_png(q["img"]); st.stop()

if "t0" not in ss: ss.t0 = time.time()
rem = max(0, TIME_IMG_VISIBLE - (time.time() - ss.t0))
st.markdown(f"### –í–æ–ø—Ä–æ—Å ‚Ññ{q['‚Ññ']} –∏–∑ {len(ss.seq)}")
render_timer(f"q_{q['‚Ññ']}", math.ceil(rem))

if rem > 0:
    st.image(io.BytesIO(fetch_png(q["img"])), width=300)
else:
    st.markdown("*–í—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.*")

st.markdown("---")

if q["qtype"] == "corners":
    opt = st.radio(q["prompt"], ["–î–∞, —É–≥–ª—ã –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞.", "–ù–µ—Ç, —É–≥–ª—ã –æ–∫—Ä–∞—à–µ–Ω—ã –≤ —Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞.", "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å."], index=None)
    if opt: save("–¥–∞" if opt.startswith("–î–∞") else "–Ω–µ—Ç" if opt.startswith("–ù–µ—Ç") else "–∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å")
else:
    txt = st.text_input(q["prompt"])
    if st.button("–ù–µ –≤–∏–∂—É –±—É–∫–≤"): save("–ù–µ –≤–∏–∂—É")
    if txt:
        if re.fullmatch(r"[–ê-–Ø–∞-—è–Å—ë ,.;:-]+", txt): save(txt.strip())
        else: st.error("–î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏.")






