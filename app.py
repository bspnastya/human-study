from __future__ import annotations
from streamlit_autorefresh import st_autorefresh
import random, time, datetime, secrets, threading, queue, re, itertools, math
from typing import List, Dict
import streamlit as st
import streamlit.components.v1 as components
import gspread
from oauth2client.service_account import ServiceAccountCredentials

MOBILE_QS_FLAG = "mobile"
st.set_page_config(page_title="–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
                   page_icon="üéØ", layout="centered",
                   initial_sidebar_state="collapsed")

components.html("""
<script>
(function() {
  const flag = '""" + MOBILE_QS_FLAG + """', isMobile = window.innerWidth < 1024;
  if (isMobile) document.documentElement.classList.add('mobile-client');
  const qs = new URLSearchParams(window.location.search);
  if (isMobile && !qs.has(flag)) { qs.set(flag,'1'); window.location.search = qs.toString(); }
})();
</script>""", height=0)

q = st.query_params if hasattr(st, "query_params") else st.experimental_get_query_params()
if q.get(MOBILE_QS_FLAG) == ["1"]:
    st.markdown("""
    <style>
      body{background:#808080;color:#fff;text-align:center;display:flex;align-items:center;justify-content:center;height:100vh;margin:0;}
      h2{margin:0 auto;line-height:1.4;font-size:1.3rem;font-weight:500;}
    </style>
    <h2>–£–≤–∞–∂–∞–µ–º—ã–π —É—á–∞—Å—Ç–Ω–∏–∫<br>–î–∞–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å <strong>–ü–ö –∏–ª–∏ –Ω–æ—É—Ç–±—É–∫–∞</strong>.</h2>
    """, unsafe_allow_html=True)
    st.stop()

BASE_URL         = "https://storage.yandexcloud.net/test3123234442"
TIME_LIMIT       = 15
INTRO_TIME_REST  = 3      
REFRESH_INTERVAL = 500

st.markdown("""
<style>
html,body,.stApp,[data-testid="stAppViewContainer"],.main,.block-container{
  background:#808080!important;color:#111!important;
}
body{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;}
h1,h2,h3,h4,h5,h6{color:#111!important;}
header[data-testid="stHeader"]{display:none;}
.stButton>button{min-height:52px!important;padding:0 20px!important;border:1px solid #555!important;background:#222!important;color:#ddd!important;border-radius:8px;}
input[data-testid="stTextInput"]{height:52px!important;padding:0 16px!important;font-size:1.05rem;}
#mobile-overlay{position:fixed;inset:0;z-index:2147483647;display:none;align-items:center;justify-content:center;color:#fff;font:500 1.2rem/1.5 sans-serif;text-align:center;padding:0 20px;background:#808080;}
@media (max-width:1023px){
  #mobile-overlay{display:flex;}
  .block-container > .element-container:nth-child(n+2){display:none!important;}
  html,body{overflow:hidden!important;height:100%!important;}
}
.stApp > div{-webkit-backface-visibility:hidden;backface-visibility:hidden;}
</style>
<div id="mobile-overlay">–£–≤–∞–∂–∞–µ–º—ã–π&nbsp;—É—á–∞—Å—Ç–Ω–∏–∫,<br>–¥–∞–Ω–Ω–æ–µ&nbsp;–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å&nbsp;–ü–ö –∏–ª–∏&nbsp;–Ω–æ—É—Ç–±—É–∫–∞.</div>
""", unsafe_allow_html=True)

def render_timer(sec:int, tid:str):
    components.html(f"""
    <div style="font-size:1.2rem;font-weight:bold;color:#111;margin-bottom:10px;margin-left:-8px;">
      –û—Å—Ç–∞–ª–æ—Å—å&nbsp;–≤—Ä–µ–º–µ–Ω–∏: <span id="timer-{tid}">{sec}</span>&nbsp;—Å–µ–∫
    </div>
    <script>
    (function() {{
        const id='timer-{tid}', span=document.getElementById(id); 
        let t={sec};
        if(window['i_'+id]) clearInterval(window['i_'+id]);
        window['i_'+id]=setInterval(()=>{{
            t--; 
            if(span) span.textContent=Math.max(0,t);
            if(t<=0) {{
                clearInterval(window['i_'+id]);
                delete window['i_'+id];
            }}
        }},1000);
    }})();
    </script>""", height=50)

@st.cache_resource(show_spinner="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ‚Ä¶")
def get_sheet():
    try:
        scopes=["https://spreadsheets.google.com/feeds","https://www.googleapis.com/auth/drive"]
        gc=gspread.authorize(ServiceAccountCredentials.from_json_keyfile_dict(dict(st.secrets["gsp"]),scopes))
        return gc.open("human_study_results").sheet1
    except: return None
SHEET=get_sheet()

log_q=queue.Queue()
def writer():
    while True:
        try:
            r=log_q.get()
            if SHEET: SHEET.append_row(r)
            log_q.task_done()
        except: pass
threading.Thread(target=writer, daemon=True).start()

GROUPS=["img1_dif_corners","img2_dif_corners","img3_same_corners_no_symb","img4_same_corners","img5_same_corners"]
ALGS  =["pca_rgb_result","socolov_lab_result","socolov_rgb_result","umap_rgb_result"]
CORNER={"img1_dif_corners":"–Ω–µ—Ç","img2_dif_corners":"–Ω–µ—Ç","img3_same_corners_no_symb":"–¥–∞","img4_same_corners":"–¥–∞","img5_same_corners":"–¥–∞"}
LETTER={"img1_dif_corners":"–∂","img2_dif_corners":"—Ñ—è","img3_same_corners_no_symb":"–ù–µ –≤–∏–∂—É","img4_same_corners":"–∞–±","img5_same_corners":"—é—ç—ã"}

def url(g:str,a:str)->str: return f"{BASE_URL}/{g}_{a}.png"
def clean(s:str)->set[str]: return set(re.sub(r"[ ,.;:-]+","",s.lower()))

def make_qs()->List[Dict]:
    pg={g:[] for g in GROUPS}
    for g,a in itertools.product(GROUPS,ALGS):
        pg[g]+=[{"group":g,"alg":a,"img":url(g,a),"qtype":"corners","prompt":"–ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π –∏ –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª ‚Äî –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞?","correct":CORNER[g]},
                {"group":g,"alg":a,"img":url(g,a),"qtype":"letters","prompt":"–ï—Å–ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤—ã –≤–∏–¥–∏—Ç–µ –±—É–∫–≤—ã, —Ç–æ —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ.","correct":LETTER[g]}]
    for v in pg.values(): random.shuffle(v)
    seq,prev=[],None
    while any(pg.values()):
        choices=[g for g in GROUPS if pg[g] and g!=prev] or [g for g in GROUPS if pg[g]]
        prev=random.choice(choices); seq.append(pg[prev].pop())
    for n,q in enumerate(seq,1): q["‚Ññ"]=n
    return seq

if "initialized" not in st.session_state:
    st.session_state.update(
        initialized=True, questions=make_qs(), idx=0, name="",
        phase="intro", phase_start_time=None, pause_until=0)

if (st.session_state.pause_until>time.time()
        and st.session_state.idx<len(st.session_state.questions)):
    st.markdown("<div style='text-align:center;font-size:1.5rem;color:#fff;background:#262626;padding:20px;border-radius:12px;margin-top:50px;'>–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É...</div>", unsafe_allow_html=True)
    stamp = int(st.session_state.pause_until)
    st_autorefresh(interval=500, key=f"pause_{stamp}")
    st.stop()

if not st.session_state.name:
    st.markdown("""
    <div style="color:#111;">
      <h2>–£–≤–∞–∂–∞–µ–º—ã–π —É—á–∞—Å—Ç–Ω–∏–∫,<br>–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ –∏–∑—É—á–µ–Ω–∏—é –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.</h2>
      <p><b>–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç</b><br>
      –í —Ö–æ–¥–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö, 
      –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ. –í—Å–µ–≥–æ –≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ <b>40</b> –≤–æ–ø—Ä–æ—Å–æ–≤. 
      –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 10-15 –º–∏–Ω—É—Ç.</p>
      <p><b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç —Å–ø–æ–∫–æ–π–Ω–æ: –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ—Ü–µ–Ω–∫—É –∏—Å–ø—ã—Ç—É–µ–º—ã—Ö.
      –û—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–¥–∞—é—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ä–∞–∑–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.</b></p>
      <p><b>–ß—Ç–æ —ç—Ç–æ –∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è?</b><br>
      –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤. –ù–∏ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ¬´—ç—Ç–∞–ª–æ–Ω–æ–º¬ª.
      –¶–µ–ª—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ ‚Äî –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª—É—á—à–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.</p>
      <p><b>–í–∞–∂–Ω–æ</b><br>
      –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–µ–Ω. –ü—Ä–æ—Ö–æ–¥–∏—Ç—å –µ–≥–æ —Å–ª–µ–¥—É–µ—Ç <b>—Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –∏–ª–∏ –Ω–æ—É—Ç–±—É–∫–µ</b>.</p>
      <p>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º¬ª.</p>
    </div>""", unsafe_allow_html=True)
    u=st.text_input("",placeholder="–í–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º",key="username",label_visibility="collapsed")
    if st.button("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º"):
        st.session_state.name=f"–£—á–∞—Å—Ç–Ω–∏–∫_{secrets.randbelow(900000)+100000}"
        st.rerun()
    if u: st.session_state.name=u.strip(); st.rerun()
    st.stop()

def finish(a:str):
    q=st.session_state.questions[st.session_state.idx]
    t_ms=int((time.time()-st.session_state.phase_start_time)*1000) if st.session_state.phase_start_time else 0
    ok=(clean(a)==clean(q["correct"]) if q["qtype"]=="letters" else a.lower()==q["correct"].lower())
    log_q.put([datetime.datetime.utcnow().isoformat(),st.session_state.name,q["‚Ññ"],q["group"],q["alg"],q["qtype"],q["prompt"],a,q["correct"],t_ms,ok])
    st.session_state.update(idx=st.session_state.idx+1, phase="intro",
                            phase_start_time=None, pause_until=time.time()+0.5)
    st.rerun()

qs,total=st.session_state.questions,len(st.session_state.questions)
idx      =st.session_state.idx
if idx>=total:
    st.markdown("<div style='margin-top:50px;padding:40px;text-align:center;font-size:2rem;color:#fff;background:#262626;border-radius:12px;'>–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ.<br><b>–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!</b></div>", unsafe_allow_html=True)
    st.balloons(); st.stop()

cur=qs[idx]

if st.session_state.phase=="intro":
    
    if idx<5:
        txt_c="""–°–µ–π—á–∞—Å –≤—ã —É–≤–∏–¥–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –¶–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –¥–∏–∞–º–µ—Ç—Ä–∞–ª—å–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —É–≥–ª—ã,
        <b>–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π –∏ –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π</b>, –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –æ–∫—Ä–∞—à–µ–Ω—ã –ª–∏ –æ–Ω–∏ –≤ –æ–¥–∏–Ω —Ü–≤–µ—Ç.<br><br>–ö–∞—Ä—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞
        –≤ —Ç–µ—á–µ–Ω–∏–µ <b>15&nbsp;—Å–µ–∫—É–Ω–¥</b>. –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ."""
        txt_l="""–°–µ–π—á–∞—Å –≤—ã —É–≤–∏–¥–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –¶–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ
        <b>–±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞</b>.<br><br>–ù–∞–π–¥–µ–Ω–Ω—ã–µ –±—É–∫–≤—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ: –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        –ø—Ä–æ–±–µ–ª–∞–º–∏, –∑–∞–ø—è—Ç—ã–º–∏ –∏ —Ç.&nbsp;–¥., –∞ —Ç–∞–∫–∂–µ —Å–ª–∏—Ç–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.<br><br>–ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–∞—Ä—Ç–∏–Ω–∫–∞—Ö –±—É–∫–≤ –Ω–µ—Ç ‚Äî —Ç–æ–≥–¥–∞
        –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´–ù–µ –≤–∏–∂—É –±—É–∫–≤¬ª</b>."""
        st.markdown(f"<div style='font-size:1.1rem;line-height:1.6;margin-bottom:30px;'>{txt_c if cur['qtype']=='corners' else txt_l}</div>", unsafe_allow_html=True)
        if st.button("–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É",key=f"go_{idx}"):
            st.session_state.update(phase="question", phase_start_time=None); st.rerun()
        st.stop()

    if st.session_state.phase_start_time is None:
        st.session_state.phase_start_time=time.time()

    remaining = INTRO_TIME_REST - (time.time() - st.session_state.phase_start_time)
    if remaining <= 0:
        st.session_state.update(phase="question", phase_start_time=None)
        st.rerun()

    render_timer(math.ceil(remaining), f"intro_{idx}")

    if cur["qtype"]=="corners":
        st.markdown("""
        <div style="font-size:1.1rem;line-height:1.6;">
          <b>–ù–∞—á–∞–ª–æ –ø–æ–∫–∞–∑–∞ ‚Äî —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è</b><br><br>
          –°–µ–π—á–∞—Å –≤—ã —É–≤–∏–¥–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –¶–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –¥–∏–∞–º–µ—Ç—Ä–∞–ª—å–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —É–≥–ª—ã,
          <b>–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π –∏ –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π</b>, –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –æ–∫—Ä–∞—à–µ–Ω—ã –ª–∏ –æ–Ω–∏ –≤ –æ–¥–∏–Ω —Ü–≤–µ—Ç.<br><br>
          –ö–∞—Ä—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ <b>15&nbsp;—Å–µ–∫—É–Ω–¥</b>. –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.
        </div>""", unsafe_allow_html=True)
    else:
        st.markdown("""
        <div style="font-size:1.1rem;line-height:1.6;">
          <b>–ù–∞—á–∞–ª–æ –ø–æ–∫–∞–∑–∞ ‚Äî —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è</b><br><br>
          –°–µ–π—á–∞—Å –≤—ã —É–≤–∏–¥–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –¶–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ
          <b>–±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞</b>.<br><br>–ù–∞–π–¥–µ–Ω–Ω—ã–µ –±—É–∫–≤—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ: –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
          –ø—Ä–æ–±–µ–ª–∞–º–∏, –∑–∞–ø—è—Ç—ã–º–∏ –∏ —Ç.&nbsp;–¥., –∞ —Ç–∞–∫–∂–µ —Å–ª–∏—Ç–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.<br><br>–ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–∞—Ä—Ç–∏–Ω–∫–∞—Ö –±—É–∫–≤ –Ω–µ—Ç ‚Äî
          —Ç–æ–≥–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´–ù–µ –≤–∏–∂—É –±—É–∫–≤¬ª</b>.
        </div>""", unsafe_allow_html=True)

    st_autorefresh(interval=REFRESH_INTERVAL, key=f"intro_refresh_{idx}")
    st.stop()

if st.session_state.phase_start_time is None:
    st.session_state.phase_start_time=time.time()
elapsed   = time.time()-st.session_state.phase_start_time
remaining = max(0, TIME_LIMIT-elapsed)

st.markdown(f"### –í–æ–ø—Ä–æ—Å ‚Ññ{cur['‚Ññ']} –∏–∑ {total}")
render_timer(math.ceil(remaining), f"question_{idx}")

with st.container():
    if remaining>0:
        components.html(f"""
        <div id="img_{idx}" style="text-align:left;margin:5px 0;">
          <img src="{cur['img']}" width="300" style="border:1px solid #444;border-radius:8px;">
        </div>
        <script>
          setTimeout(()=>{{const c=document.getElementById('img_{idx}');
            if(c)c.innerHTML='<div style="font-style:italic;color:#666;padding:20px 0;">–í—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.</div>';}},
            {TIME_LIMIT*1000});
        </script>""", height=310)
    else:
        st.markdown("<div style='text-align:left;font-style:italic;color:#666;padding:40px 0;'>–í—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.</div>", unsafe_allow_html=True)

st.markdown("---")

if cur["qtype"]=="corners":
    sel=st.radio(cur["prompt"],
                 ["–î–∞, —É–≥–ª—ã –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞.","–ù–µ—Ç, —É–≥–ª—ã –æ–∫—Ä–∞—à–µ–Ω—ã –≤ —Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞.","–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å."],
                 index=None, key=f"r_{idx}")
    if sel:
        finish("–¥–∞" if sel.startswith("–î–∞") else "–Ω–µ—Ç" if sel.startswith("–ù–µ—Ç") else "–∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å")
else:
    txt=st.text_input(cur["prompt"], key=f"t_{idx}", placeholder="–í–≤–µ–¥–∏—Ç–µ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –Ω–∞–∂–º–∏—Ç–µ Enter")
    col1,_=st.columns([1,3])
    with col1:
        if st.button("–ù–µ –≤–∏–∂—É –±—É–∫–≤", key=f"s_{idx}"): finish("–ù–µ –≤–∏–∂—É")
    if txt:
        if re.fullmatch(r"[–ê-–Ø–∞-—è–Å—ë ,.;:-]+", txt): finish(txt.strip())
        else: st.error("–î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏.")

if remaining>0:
    st_autorefresh(interval=1000, key=f"question_refresh_{idx}")





