from __future__ import annotations
from streamlit_autorefresh import st_autorefresh
import random, time, datetime, secrets, threading, queue, re, itertools
from typing import List, Dict
import streamlit as st, streamlit.components.v1 as components
import gspread
from oauth2client.service_account import ServiceAccountCredentials

st.set_page_config(page_title="–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
                   page_icon="üéØ", layout="centered",
                   initial_sidebar_state="collapsed")


st.markdown(r"""
<style>
html,body,.stApp,[data-testid="stAppViewContainer"],.main,.block-container{
  background:#808080!important;color:#111!important;}
h1,h2,h3,h4,h5,h6{color:#111!important;}
.question-card,* .question-card{color:#fff!important;}
/* —à—Ç–∞—Ç–Ω—ã–µ streamlit-–∫–Ω–æ–ø–∫–∏ ‚Äì –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å */
.stButton>button{
  min-height:52px!important;padding:0 20px!important;border-radius:8px;
  border:1px solid #555!important;background:#222!important;color:#ddd!important;}
input[data-testid="stTextInput"]{
  height:52px!important;padding:0 16px!important;font-size:1.05rem;}
header[data-testid="stHeader"],div[data-testid="stHeader"]{display:none;}
div[data-testid="column"]{padding:0 5px!important;} div[data-testid="column"]>div{padding:0!important;}

#mobile-overlay{position:fixed;inset:0;z-index:9999;background:#808080;display:none;
  align-items:center;justify-content:center;color:#fff;font:500 1.2rem/1.5 sans-serif;text-align:center;padding:0 20px;}
@media (max-width:1023px){#mobile-overlay{display:flex;}}


.custom-buttons{display:flex;gap:8px;margin-top:12px;justify-content:flex-start;}
.custom-btn{
  flex:0 0 200px;           
  min-height:64px;
  border:1px solid;border-radius:8px;font-size:1.1rem;font-weight:700;
  cursor:pointer;transition:background .15s;}
.btn-submit{background:#2d6a4f;border-color:#2d6a4f;color:#fff;}
.btn-submit:hover{background:#25593f;border-color:#25593f;}
.btn-skip{background:#8d0801;border-color:#8d0801;color:#fff;}
.btn-skip:hover{background:#7a0701;border-color:#7a0701;}
</style>
<div id="mobile-overlay">
  –£–≤–∞–∂–∞–µ–º—ã–π&nbsp;—É—á–∞—Å—Ç–Ω–∏–∫,<br>
  –¥–∞–Ω–Ω–æ–µ&nbsp;–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å&nbsp;–ü–ö –∏–ª–∏&nbsp;–Ω–æ—É—Ç–±—É–∫–∞.
</div>
""", unsafe_allow_html=True)

@st.cache_resource(show_spinner="‚Ä¶")
def get_sheet() -> gspread.Worksheet:
    scopes=["https://spreadsheets.google.com/feeds","https://www.googleapis.com/auth/drive"]
    gc=gspread.authorize(ServiceAccountCredentials.from_json_keyfile_dict(dict(st.secrets["gsp"]),scopes))
    return gc.open("human_study_results").sheet1
try: SHEET=get_sheet()
except Exception: SHEET=None

log_q: "queue.Queue[list]" = queue.Queue()
def _writer():
    while True:
        row=log_q.get()
        try:
            if SHEET: SHEET.append_row(row)
        except Exception as e: print("Sheets error:",e)
        log_q.task_done()
threading.Thread(target=_writer,daemon=True).start()


BASE_URL   = "https://storage.yandexcloud.net/test3123234442"
TIME_LIMIT = 15
GROUPS=["img1_dif_corners","img2_dif_corners","img3_same_corners_no_symb","img4_same_corners","img5_same_corners"]
ALGS=["pca_rgb_result","socolov_lab_result","socolov_rgb_result","umap_rgb_result"]
CORNER_ANS={"img1_dif_corners":"–Ω–µ—Ç","img2_dif_corners":"–Ω–µ—Ç","img3_same_corners_no_symb":"–¥–∞","img4_same_corners":"–¥–∞","img5_same_corners":"–¥–∞"}
LETTER_ANS={"img1_dif_corners":"–∂","img2_dif_corners":"—Ñ—è","img3_same_corners_no_symb":"–ù–µ –≤–∏–∂—É",
            "img4_same_corners":"–∞–±","img5_same_corners":"—é—ç—ã"}

def file_url(g,a): return f"{BASE_URL}/{g}_{a}.png"

def make_questions()->List[Dict]:
    per_group={g:[] for g in GROUPS}
    for g,a in itertools.product(GROUPS,ALGS):
        per_group[g]+=[
            dict(group=g,alg=a,img=file_url(g,a),qtype="corners",
                 prompt="–ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π –∏ –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª ‚Äî –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞?",correct=CORNER_ANS[g]),
            dict(group=g,alg=a,img=file_url(g,a),qtype="letters",
                 prompt="–ï—Å–ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤—ã –≤–∏–¥–∏—Ç–µ –±—É–∫–≤—ã, —Ç–æ —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ.",correct=LETTER_ANS[g])]
    for v in per_group.values(): random.shuffle(v)
    ordered=[]
    while any(per_group.values()):
        cycle=list(GROUPS); random.shuffle(cycle)
        for g in cycle:
            if per_group[g]: ordered.append(per_group[g].pop())
    for n,q in enumerate(ordered,1): q["‚Ññ"]=n
    return ordered

if "questions" not in st.session_state:
    st.session_state.update(questions=make_questions(),idx=0,name="",q_start=None,phase="intro",intro_start=None)
qs=st.session_state.questions; total_q=len(qs)

if "button_clicked" not in st.session_state: st.session_state.button_clicked=None
if st.session_state.get("blank_until",0)>time.time(): st_autorefresh(interval=250,key="blank"); st.stop()
elif "blank_until" in st.session_state: del st.session_state["blank_until"]


if not st.session_state.name:
    st.markdown("""<div style="color:#111;">
  <h2>–£–≤–∞–∂–∞–µ–º—ã–π —É—á–∞—Å—Ç–Ω–∏–∫,<br>–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ –∏–∑—É—á–µ–Ω–∏—é –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.</h2>
  <p><b>–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç</b><br>
     –í —Ö–æ–¥–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö, 
     –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ. –í—Å–µ–≥–æ –≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ <b>40</b> –≤–æ–ø—Ä–æ—Å–æ–≤. 
     –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 10-15 –º–∏–Ω—É—Ç.</p>
  <p><b>–ß—Ç–æ —ç—Ç–æ –∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è?</b><br>
     –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤. –ù–∏ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ¬´—ç—Ç–∞–ª–æ–Ω–æ–º¬ª.</p>
  <p><b>–í–∞–∂–Ω–æ</b> ‚Äî –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –ü–ö/–Ω–æ—É—Ç–±—É–∫–µ.</p>
  <p>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –∏–ª–∏ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º¬ª.</p>
</div>""",unsafe_allow_html=True)
    uname=st.text_input("",placeholder="–§–∞–º–∏–ª–∏—è / –ø—Å–µ–≤–¥–æ–Ω–∏–º",key="username",label_visibility="collapsed")
    if st.button("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º"):
        st.session_state.name=f"–£—á–∞—Å—Ç–Ω–∏–∫_{secrets.randbelow(900_000)+100_000}"; st.experimental_rerun()
    if uname: st.session_state.name=uname.strip(); st.experimental_rerun()
    st.stop()


def letters_set(s): return set(re.sub(r"[ ,.;:-]+","",s.lower()))
def finish(ans:str):
    q=qs[st.session_state.idx]; ms=int((time.time()-st.session_state.q_start)*1000) if st.session_state.q_start else 0
    ok = letters_set(ans)==letters_set(q["correct"]) if q["qtype"]=="letters" else ans.lower()==q["correct"].lower()
    if SHEET:
        log_q.put([datetime.datetime.utcnow().isoformat(),st.session_state.name,
                   q["‚Ññ"],q["group"],q["alg"],q["qtype"],q["prompt"],ans,q["correct"],ms,ok])
    q.update({"–æ—Ç–≤–µ—Ç":ans or "‚Äî","–≤—Ä–µ–º—è, –º—Å":f"{ms:,}","‚úì":"‚úÖ" if ok else "‚ùå"})
    st.session_state.idx+=1; st.session_state.phase="intro"; st.session_state.intro_start=None
    st.session_state.q_start=None; st.session_state.blank_until=time.time()+1.0; st.session_state.button_clicked=None
    st.experimental_rerun()


i=st.session_state.idx
if i<total_q:
    q=qs[i]

    intro_limit = 8 if i<5 else 2
    if st.session_state.phase=="intro":
        if st.session_state.intro_start is None: st.session_state.intro_start=time.time()
        elapsed=time.time()-st.session_state.intro_start; left_intro=max(int(intro_limit-elapsed),0)
        st_autorefresh(interval=500,key=f"intro{i}")
        st.markdown("""
        <div style="font-size:1.1rem;">%s</div>"""%(
        "–°–µ–π—á–∞—Å –≤—ã —É–≤–∏–¥–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –¶–µ–ª—å ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —É–≥–ª—ã <b>–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π –∏ –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π</b> –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –æ–¥–∏–Ω–∞–∫–æ–≤—ã –ª–∏ —Ü–≤–µ—Ç–∞.<br><br>–ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ 15&nbsp;—Å. –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ."
        if q["qtype"]=="corners" else
        "–°–µ–π—á–∞—Å –≤—ã —É–≤–∏–¥–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å, –µ—Å—Ç—å –ª–∏ <b>–±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞</b>. –ë—É–∫–≤—ã –≤–≤–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª/–∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏–ª–∏ —Å–ª–∏—Ç–Ω–æ.<br><br>–ï—Å–ª–∏ –±—É–∫–≤ –Ω–µ—Ç ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–µ –≤–∏–∂—É&nbsp;–±—É–∫–≤¬ª."),
        unsafe_allow_html=True)
        st.markdown(f"**–ù–∞—á–∞–ª–æ –ø–æ–∫–∞–∑–∞ —á–µ—Ä–µ–∑&nbsp;{left_intro} —Å**")
        if elapsed>=intro_limit:
            st.session_state.phase="question"; st.session_state.q_start=None; st.experimental_rerun()
        st.stop()


    if st.session_state.q_start is None: st.session_state.q_start=time.time()
    elapsed_q=time.time()-st.session_state.q_start; left=max(TIME_LIMIT-int(elapsed_q),0)
    st_autorefresh(interval=1000,key=f"q{i}")

    components.html(f"""<div style="display:flex;gap:16px;height:70px">
      <div style="position:relative;width:70px;height:70px">
        <svg width="70" height="70"><circle cx="35" cy="35" r="26" stroke="#444" stroke-width="6" fill="none"/>
        <circle cx="35" cy="35" r="26" stroke="#52b788" stroke-width="6" fill="none" stroke-dasharray="163.36"
          stroke-dashoffset="{163.36*(left/15)}" transform="rotate(-90 35 35)"/></svg>
        <span style="position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);
              font:700 1.2rem sans-serif;color:#52b788">{left}</span></div></div>""",height=80)

    st.markdown(f"### –í–æ–ø—Ä–æ—Å ‚Ññ{q['‚Ññ']} –∏–∑ {total_q}")
    st.image(q["img"],width=290,clamp=True) if left>0 else st.markdown("<i>–í—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.</i>",unsafe_allow_html=True)

    if q["qtype"]=="corners":
        sel_map={"–î–∞, —É–≥–ª—ã –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞.":"–¥–∞","–ù–µ—Ç, —É–≥–ª—ã –æ–∫—Ä–∞—à–µ–Ω—ã –≤ —Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞.":"–Ω–µ—Ç","–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å.":"–∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å"}
        sel=st.radio(q["prompt"],list(sel_map.keys()),index=None,key=f"radio{i}")
        if sel: finish(sel_map[sel])
    else:
        txt=st.text_input(q["prompt"],key=f"in{i}",placeholder="–í–≤–µ–¥–∏—Ç–µ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã")
        if txt and not re.fullmatch(r"[–ê-–Ø–∞-—è–Å—ë ,.;:-]+",txt): st.error("–î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏.")

 
        sub_click = st.button("–û—Ç–≤–µ—Ç–∏—Ç—å",key=f"submit{i}",disabled=True,label_visibility="collapsed")
        skip_click= st.button("–ù–µ –≤–∏–∂—É –±—É–∫–≤",key=f"skip{i}",disabled=True,label_visibility="collapsed")

       
        components.html(f"""
        <div class="custom-buttons">
          <button class="custom-btn btn-submit" onclick="
            const v=document.querySelector('input[data-testid=\\'stTextInput\\']').value.trim();
            if(!v){{alert('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–µ –≤–∏–∂—É –±—É–∫–≤¬ª.');return;}}
            if(!/^[–ê-–Ø–∞-—è–Å—ë ,.;:-]+$/.test(v)){{alert('–î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏.');return;}}
            parent.document.querySelector('button[id$=\\'submit{i}\\']')?.click();">
            –û—Ç–≤–µ—Ç–∏—Ç—å</button>
          <button class="custom-btn btn-skip" onclick="
            parent.document.querySelector('button[id$=\\'skip{i}\\']')?.click();">
            –ù–µ –≤–∏–∂—É –±—É–∫–≤</button>
        </div>""",height=90)

        if sub_click and txt and re.fullmatch(r"[–ê-–Ø–∞-—è–Å—ë ,.;:-]+",txt): finish(txt.strip())
        if skip_click: finish("–ù–µ –≤–∏–∂—É")

else:
    st.success("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")










